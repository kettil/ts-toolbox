// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createConfig() it should work and hasLibrary returns false 1`] = `
Object {
  "env": Object {
    "es2022": true,
    "node": true,
  },
  "globals": Object {
    "ArrayBuffer": "readonly",
    "Atomics": "readonly",
    "BigInt": "readonly",
    "BigInt64Array": "readonly",
    "BigUint64Array": "readonly",
    "Buffer": "readonly",
    "DataView": "readonly",
    "Float32Array": "readonly",
    "Float64Array": "readonly",
    "GLOBAL": "readonly",
    "Int16Array": "readonly",
    "Int32Array": "readonly",
    "Int8Array": "readonly",
    "Intl": "readonly",
    "Map": "readonly",
    "Promise": "readonly",
    "Proxy": "readonly",
    "Reflect": "readonly",
    "Set": "readonly",
    "SharedArrayBuffer": "readonly",
    "Symbol": "readonly",
    "TextDecoder": "readonly",
    "TextEncoder": "readonly",
    "URL": "readonly",
    "URLSearchParams": "readonly",
    "Uint16Array": "readonly",
    "Uint32Array": "readonly",
    "Uint8Array": "readonly",
    "Uint8ClampedArray": "readonly",
    "WeakMap": "readonly",
    "WeakSet": "readonly",
    "WebAssembly": "readonly",
    "__dirname": "readonly",
    "__filename": "readonly",
    "clearImmediate": "readonly",
    "clearInterval": "readonly",
    "clearTimeout": "readonly",
    "console": "readonly",
    "exports": "writable",
    "global": "readonly",
    "globalThis": "readonly",
    "module": "readonly",
    "process": "readonly",
    "queueMicrotask": "readonly",
    "require": "readonly",
    "root": "readonly",
    "setImmediate": "readonly",
    "setInterval": "readonly",
    "setTimeout": "readonly",
  },
  "overrides": Array [
    Object {
      "files": Array [
        "*.js",
      ],
      "rules": Object {
        "node/exports-style": Array [
          "error",
          "module.exports",
        ],
      },
    },
    Object {
      "files": Array [
        "*.ts",
        "*.tsx",
      ],
      "globals": Object {
        "exports": "off",
        "module": "off",
        "require": "off",
      },
      "rules": Object {
        "node/no-missing-import": Array [
          "error",
          Object {
            "tryExtensions": Array [
              ".js",
              ".jsx",
              ".json",
              ".ts",
              ".tsx",
            ],
          },
        ],
      },
    },
    Object {
      "files": Array [
        "**/src/index.js",
        "**/src/index.ts",
      ],
      "rules": Object {
        "node/no-sync": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "babel.config.js",
        "jest.config.js",
      ],
      "rules": Object {
        "import/extensions": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "**/src/index.js",
        "**/src/index.ts",
        "**/src/bin/**/*",
      ],
      "rules": Object {
        "import/no-unused-modules": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "**/index.js",
        "**/index.ts",
      ],
      "rules": Object {
        "import/max-dependencies": Array [
          "error",
          Object {
            "max": 30,
          },
        ],
      },
    },
    Object {
      "files": Array [
        "*.js",
      ],
      "rules": Object {
        "import/no-unused-modules": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "*.ts",
        "*.tsx",
      ],
      "rules": Object {
        "unicorn/no-array-callback-reference": Array [
          "off",
        ],
      },
    },
    Object {
      "excludedFiles": Array [
        "index.tsx",
        "index.test.tsx",
        "_app.tsx",
        "_document.tsx",
      ],
      "files": Array [
        "*.tsx",
      ],
      "rules": Object {
        "unicorn/filename-case": Array [
          "error",
          Object {
            "case": "pascalCase",
          },
        ],
      },
    },
    Object {
      "excludedFiles": Array [
        "_app.tsx",
        "_document.tsx",
      ],
      "files": Array [
        "*.tsx",
      ],
      "rules": Object {
        "unicorn/no-null": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "**/tests/**/*.test.js",
        "**/tests/**/*.test.ts",
        "**/tests/**/*.test.tsx",
      ],
      "rules": Object {
        "unicorn/no-null": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "*.test.js",
        "*.test.ts",
        "*.test.tsx",
      ],
      "rules": Object {
        "sonarjs/no-identical-functions": Array [
          "off",
        ],
      },
    },
  ],
  "parser": undefined,
  "parserOptions": Object {
    "ecmaFeatures": Object {
      "globalReturn": false,
      "impliedStrict": false,
    },
    "ecmaVersion": "latest",
    "sourceType": "module",
  },
  "plugins": Array [
    "node",
    "import",
    "unicorn",
    "eslint-comments",
    "sonarjs",
    "regexp",
  ],
  "rules": Object {
    "accessor-pairs": Array [
      "off",
    ],
    "array-bracket-newline": Array [
      "off",
      "consistent",
    ],
    "array-bracket-spacing": Array [
      "error",
      "never",
    ],
    "array-callback-return": Array [
      "error",
      Object {
        "allowImplicit": true,
      },
    ],
    "array-element-newline": Array [
      "off",
      Object {
        "minItems": 3,
        "multiline": true,
      },
    ],
    "arrow-body-style": Array [
      "error",
      "as-needed",
    ],
    "arrow-parens": Array [
      "error",
      "always",
    ],
    "arrow-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": true,
      },
    ],
    "block-scoped-var": Array [
      "error",
    ],
    "block-spacing": Array [
      "error",
      "always",
    ],
    "brace-style": Array [
      "error",
      "1tbs",
      Object {
        "allowSingleLine": true,
      },
    ],
    "callback-return": Array [
      "off",
    ],
    "camelcase": Array [
      "error",
      Object {
        "ignoreDestructuring": false,
        "ignoreImports": false,
        "properties": "never",
      },
    ],
    "capitalized-comments": Array [
      "off",
      "never",
      Object {
        "block": Object {
          "ignoreConsecutiveComments": true,
          "ignoreInlineComments": true,
          "ignorePattern": ".*",
        },
        "line": Object {
          "ignoreConsecutiveComments": true,
          "ignoreInlineComments": true,
          "ignorePattern": ".*",
        },
      },
    ],
    "class-methods-use-this": Array [
      "error",
      Object {
        "exceptMethods": Array [
          "render",
          "getInitialState",
          "getDefaultProps",
          "getChildContext",
          "componentWillMount",
          "UNSAFE_componentWillMount",
          "componentDidMount",
          "componentWillReceiveProps",
          "UNSAFE_componentWillReceiveProps",
          "shouldComponentUpdate",
          "componentWillUpdate",
          "UNSAFE_componentWillUpdate",
          "componentDidUpdate",
          "componentWillUnmount",
          "componentDidCatch",
          "getSnapshotBeforeUpdate",
        ],
      },
    ],
    "comma-dangle": Array [
      "error",
      "always-multiline",
    ],
    "comma-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "comma-style": Array [
      "error",
      "last",
      Object {
        "exceptions": Object {
          "ArrayExpression": false,
          "ArrayPattern": false,
          "ArrowFunctionExpression": false,
          "CallExpression": false,
          "FunctionDeclaration": false,
          "FunctionExpression": false,
          "ImportDeclaration": false,
          "NewExpression": false,
          "ObjectExpression": false,
          "ObjectPattern": false,
          "VariableDeclaration": false,
        },
      },
    ],
    "complexity": Array [
      "error",
      15,
    ],
    "computed-property-spacing": Array [
      "error",
      "never",
    ],
    "consistent-return": Array [
      "error",
    ],
    "consistent-this": Array [
      "off",
    ],
    "constructor-super": Array [
      "error",
    ],
    "curly": Array [
      "error",
      "all",
    ],
    "default-case": Array [
      "error",
      Object {
        "commentPattern": "^no default$",
      },
    ],
    "default-case-last": Array [
      "error",
    ],
    "default-param-last": Array [
      "error",
    ],
    "dot-location": Array [
      "error",
      "property",
    ],
    "dot-notation": Array [
      "error",
      Object {
        "allowKeywords": true,
        "allowPattern": "",
      },
    ],
    "eol-last": Array [
      "error",
      "always",
    ],
    "eqeqeq": Array [
      "error",
      "always",
    ],
    "eslint-comments/disable-enable-pair": Array [
      "error",
      Object {
        "allowWholeFile": true,
      },
    ],
    "eslint-comments/no-aggregating-enable": Array [
      "error",
    ],
    "eslint-comments/no-duplicate-disable": Array [
      "error",
    ],
    "eslint-comments/no-restricted-disable": Array [
      "off",
    ],
    "eslint-comments/no-unlimited-disable": Array [
      "error",
    ],
    "eslint-comments/no-unused-disable": Array [
      "error",
    ],
    "eslint-comments/no-unused-enable": Array [
      "error",
    ],
    "eslint-comments/no-use": Array [
      "off",
    ],
    "eslint-comments/require-description": Array [
      "error",
    ],
    "for-direction": Array [
      "error",
    ],
    "func-call-spacing": Array [
      "error",
      "never",
    ],
    "func-name-matching": Array [
      "off",
      "always",
      Object {
        "considerPropertyDescriptor": true,
        "includeCommonJSModuleExports": false,
      },
    ],
    "func-names": Array [
      "warn",
    ],
    "func-style": Array [
      "off",
      "expression",
    ],
    "function-call-argument-newline": Array [
      "off",
      "consistent",
    ],
    "function-paren-newline": Array [
      "off",
      "consistent",
    ],
    "generator-star-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "getter-return": Array [
      "error",
      Object {
        "allowImplicit": true,
      },
    ],
    "global-require": Array [
      "off",
    ],
    "grouped-accessor-pairs": Array [
      "off",
    ],
    "guard-for-in": Array [
      "error",
    ],
    "handle-callback-err": Array [
      "off",
    ],
    "id-blacklist": Array [
      "off",
    ],
    "id-denylist": Array [
      "error",
      "any",
      "number",
      "string",
      "boolean",
      "Undefined",
    ],
    "id-length": Array [
      "off",
    ],
    "id-match": Array [
      "error",
    ],
    "implicit-arrow-linebreak": Array [
      "off",
      "beside",
    ],
    "import/default": Array [
      "error",
    ],
    "import/dynamic-import-chunkname": Array [
      "off",
      Object {
        "importFunctions": Array [],
        "webpackChunknameFormat": "[0-9a-zA-Z-_/.]+",
      },
    ],
    "import/export": Array [
      "error",
    ],
    "import/exports-last": Array [
      "off",
    ],
    "import/extensions": Array [
      "error",
      "always",
      Object {
        "ignorePackages": true,
        "pattern": Object {
          "js": "never",
          "ts": "never",
          "tsx": "never",
        },
      },
    ],
    "import/first": Array [
      "error",
    ],
    "import/group-exports": Array [
      "error",
    ],
    "import/imports-first": Array [
      "off",
    ],
    "import/max-dependencies": Array [
      "error",
      Object {
        "max": 15,
      },
    ],
    "import/named": Array [
      "error",
    ],
    "import/namespace": Array [
      "error",
    ],
    "import/newline-after-import": Array [
      "error",
    ],
    "import/no-absolute-path": Array [
      "error",
    ],
    "import/no-amd": Array [
      "error",
    ],
    "import/no-anonymous-default-export": Array [
      "error",
      Object {
        "allowAnonymousClass": false,
        "allowAnonymousFunction": false,
        "allowArray": false,
        "allowArrowFunction": false,
        "allowLiteral": false,
        "allowObject": false,
      },
    ],
    "import/no-commonjs": Array [
      "off",
    ],
    "import/no-cycle": Array [
      "error",
    ],
    "import/no-default-export": Array [
      "error",
    ],
    "import/no-deprecated": Array [
      "off",
    ],
    "import/no-duplicates": Array [
      "warn",
    ],
    "import/no-dynamic-require": Array [
      "error",
    ],
    "import/no-extraneous-dependencies": Array [
      "error",
      Object {
        "devDependencies": Array [
          "**/*.test.js",
          "**/*.test.ts",
          "**/*.test.tsx",
          "**/tests/shared/**/*",
        ],
      },
    ],
    "import/no-import-module-exports": Array [
      "error",
    ],
    "import/no-internal-modules": Array [
      "off",
      Object {
        "allow": Array [],
      },
    ],
    "import/no-mutable-exports": Array [
      "error",
    ],
    "import/no-named-as-default": Array [
      "warn",
    ],
    "import/no-named-as-default-member": Array [
      "warn",
    ],
    "import/no-named-default": Array [
      "error",
    ],
    "import/no-named-export": Array [
      "off",
    ],
    "import/no-namespace": Array [
      "off",
    ],
    "import/no-nodejs-modules": Array [
      "off",
    ],
    "import/no-relative-packages": Array [
      "error",
    ],
    "import/no-relative-parent-imports": Array [
      "off",
    ],
    "import/no-restricted-paths": Array [
      "off",
    ],
    "import/no-self-import": Array [
      "error",
    ],
    "import/no-unassigned-import": Array [
      "off",
    ],
    "import/no-unresolved": Array [
      "error",
      Object {
        "caseSensitive": true,
        "commonjs": true,
      },
    ],
    "import/no-unused-modules": Array [
      "error",
      Object {
        "missingExports": true,
        "unusedExports": true,
      },
    ],
    "import/no-useless-path-segments": Array [
      "error",
      Object {
        "commonjs": true,
      },
    ],
    "import/no-webpack-loader-syntax": Array [
      "error",
    ],
    "import/order": Array [
      "error",
      Object {
        "alphabetize": Object {
          "caseInsensitive": true,
          "order": "asc",
        },
        "groups": Array [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index",
          "unknown",
        ],
        "pathGroups": Array [
          Object {
            "group": "internal",
            "pattern": "#*/**",
          },
        ],
      },
    ],
    "import/prefer-default-export": Array [
      "off",
    ],
    "import/unambiguous": Array [
      "off",
    ],
    "indent": Array [
      "error",
      2,
      Object {
        "ArrayExpression": 1,
        "CallExpression": Object {
          "arguments": 1,
        },
        "FunctionDeclaration": Object {
          "body": 1,
          "parameters": 1,
        },
        "FunctionExpression": Object {
          "body": 1,
          "parameters": 1,
        },
        "ImportDeclaration": 1,
        "ObjectExpression": 1,
        "SwitchCase": 1,
        "VariableDeclarator": 1,
        "flatTernaryExpressions": false,
        "ignoreComments": false,
        "ignoredNodes": Array [
          "JSXElement",
          "JSXElement > *",
          "JSXAttribute",
          "JSXIdentifier",
          "JSXNamespacedName",
          "JSXMemberExpression",
          "JSXSpreadAttribute",
          "JSXExpressionContainer",
          "JSXOpeningElement",
          "JSXClosingElement",
          "JSXFragment",
          "JSXOpeningFragment",
          "JSXClosingFragment",
          "JSXText",
          "JSXEmptyExpression",
          "JSXSpreadChild",
        ],
        "outerIIFEBody": 1,
      },
    ],
    "indent-legacy": Array [
      "off",
    ],
    "init-declarations": Array [
      "off",
    ],
    "jsx-quotes": Array [
      "error",
      "prefer-double",
    ],
    "key-spacing": Array [
      "error",
      Object {
        "afterColon": true,
        "beforeColon": false,
      },
    ],
    "keyword-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": true,
        "overrides": Object {
          "case": Object {
            "after": true,
          },
          "return": Object {
            "after": true,
          },
          "throw": Object {
            "after": true,
          },
        },
      },
    ],
    "line-comment-position": Array [
      "off",
      Object {
        "applyDefaultPatterns": true,
        "ignorePattern": "",
        "position": "above",
      },
    ],
    "linebreak-style": Array [
      "error",
      "unix",
    ],
    "lines-around-comment": Array [
      "off",
    ],
    "lines-around-directive": Array [
      "off",
    ],
    "lines-between-class-members": Array [
      "error",
      "always",
      Object {
        "exceptAfterSingleLine": false,
      },
    ],
    "max-classes-per-file": Array [
      "error",
      1,
    ],
    "max-depth": Array [
      "off",
      4,
    ],
    "max-len": Array [
      "error",
      Object {
        "code": 120,
        "ignoreStrings": true,
      },
    ],
    "max-lines": Array [
      "off",
      Object {
        "max": 300,
        "skipBlankLines": true,
        "skipComments": true,
      },
    ],
    "max-lines-per-function": Array [
      "off",
      Object {
        "IIFEs": true,
        "max": 50,
        "skipBlankLines": true,
        "skipComments": true,
      },
    ],
    "max-nested-callbacks": Array [
      "off",
    ],
    "max-params": Array [
      "off",
      3,
    ],
    "max-statements": Array [
      "off",
      10,
    ],
    "max-statements-per-line": Array [
      "off",
      Object {
        "max": 1,
      },
    ],
    "multiline-comment-style": Array [
      "off",
      "starred-block",
    ],
    "multiline-ternary": Array [
      "off",
      "never",
    ],
    "new-cap": Array [
      "error",
      Object {
        "capIsNew": false,
        "capIsNewExceptions": Array [
          "Immutable.Map",
          "Immutable.Set",
          "Immutable.List",
        ],
        "newIsCap": true,
        "newIsCapExceptions": Array [],
        "properties": true,
      },
    ],
    "new-parens": Array [
      "error",
    ],
    "newline-after-var": Array [
      "off",
    ],
    "newline-before-return": Array [
      "off",
    ],
    "newline-per-chained-call": Array [
      "error",
      Object {
        "ignoreChainWithDepth": 4,
      },
    ],
    "no-alert": Array [
      "warn",
    ],
    "no-array-constructor": Array [
      "error",
    ],
    "no-async-promise-executor": Array [
      "error",
    ],
    "no-await-in-loop": Array [
      "error",
    ],
    "no-bitwise": Array [
      "error",
    ],
    "no-buffer-constructor": Array [
      "off",
    ],
    "no-caller": Array [
      "error",
    ],
    "no-case-declarations": Array [
      "error",
    ],
    "no-catch-shadow": Array [
      "off",
    ],
    "no-class-assign": Array [
      "error",
    ],
    "no-compare-neg-zero": Array [
      "error",
    ],
    "no-cond-assign": Array [
      "error",
      "always",
    ],
    "no-confusing-arrow": Array [
      "error",
      Object {
        "allowParens": true,
      },
    ],
    "no-console": Array [
      "error",
    ],
    "no-const-assign": Array [
      "error",
    ],
    "no-constant-condition": Array [
      "error",
    ],
    "no-constructor-return": Array [
      "off",
    ],
    "no-continue": Array [
      "error",
    ],
    "no-control-regex": Array [
      "error",
    ],
    "no-debugger": Array [
      "error",
    ],
    "no-delete-var": Array [
      "error",
    ],
    "no-div-regex": Array [
      "off",
    ],
    "no-dupe-args": Array [
      "error",
    ],
    "no-dupe-class-members": Array [
      "error",
    ],
    "no-dupe-else-if": Array [
      "error",
    ],
    "no-dupe-keys": Array [
      "error",
    ],
    "no-duplicate-case": Array [
      "error",
    ],
    "no-duplicate-imports": Array [
      "error",
      Object {
        "includeExports": true,
      },
    ],
    "no-else-return": Array [
      "error",
      Object {
        "allowElseIf": false,
      },
    ],
    "no-empty": Array [
      "error",
    ],
    "no-empty-character-class": Array [
      "error",
    ],
    "no-empty-function": Array [
      "error",
      Object {
        "allow": Array [
          "arrowFunctions",
          "functions",
          "methods",
        ],
      },
    ],
    "no-empty-pattern": Array [
      "error",
    ],
    "no-eq-null": Array [
      "off",
    ],
    "no-eval": Array [
      "error",
    ],
    "no-ex-assign": Array [
      "error",
    ],
    "no-extend-native": Array [
      "error",
    ],
    "no-extra-bind": Array [
      "error",
    ],
    "no-extra-boolean-cast": Array [
      "error",
    ],
    "no-extra-label": Array [
      "error",
    ],
    "no-extra-parens": Array [
      "off",
      "all",
      Object {
        "conditionalAssign": true,
        "enforceForArrowConditionals": false,
        "ignoreJSX": "all",
        "nestedBinaryExpressions": false,
        "returnAssign": false,
      },
    ],
    "no-extra-semi": Array [
      "error",
    ],
    "no-fallthrough": Array [
      "off",
    ],
    "no-floating-decimal": Array [
      "error",
    ],
    "no-func-assign": Array [
      "error",
    ],
    "no-global-assign": Array [
      "error",
      Object {
        "exceptions": Array [],
      },
    ],
    "no-implicit-coercion": Array [
      "off",
      Object {
        "allow": Array [],
        "boolean": false,
        "number": true,
        "string": true,
      },
    ],
    "no-implicit-globals": Array [
      "off",
    ],
    "no-implied-eval": Array [
      "error",
    ],
    "no-import-assign": Array [
      "error",
    ],
    "no-inline-comments": Array [
      "off",
    ],
    "no-inner-declarations": Array [
      "error",
    ],
    "no-invalid-regexp": Array [
      "error",
    ],
    "no-invalid-this": Array [
      "off",
    ],
    "no-irregular-whitespace": Array [
      "error",
    ],
    "no-iterator": Array [
      "error",
    ],
    "no-label-var": Array [
      "error",
    ],
    "no-labels": Array [
      "error",
      Object {
        "allowLoop": false,
        "allowSwitch": false,
      },
    ],
    "no-lone-blocks": Array [
      "error",
    ],
    "no-lonely-if": Array [
      "error",
    ],
    "no-loop-func": Array [
      "error",
    ],
    "no-loss-of-precision": Array [
      "error",
    ],
    "no-magic-numbers": Array [
      "off",
      Object {
        "detectObjects": false,
        "enforceConst": true,
        "ignore": Array [],
        "ignoreArrayIndexes": true,
      },
    ],
    "no-misleading-character-class": Array [
      "error",
    ],
    "no-mixed-operators": Array [
      "error",
      Object {
        "allowSamePrecedence": false,
        "groups": Array [
          Array [
            "%",
            "**",
          ],
          Array [
            "%",
            "+",
          ],
          Array [
            "%",
            "-",
          ],
          Array [
            "%",
            "*",
          ],
          Array [
            "%",
            "/",
          ],
          Array [
            "/",
            "*",
          ],
          Array [
            "&",
            "|",
            "<<",
            ">>",
            ">>>",
          ],
          Array [
            "==",
            "!=",
            "===",
            "!==",
          ],
          Array [
            "&&",
            "||",
          ],
        ],
      },
    ],
    "no-mixed-requires": Array [
      "off",
    ],
    "no-mixed-spaces-and-tabs": Array [
      "error",
    ],
    "no-multi-assign": Array [
      "error",
    ],
    "no-multi-spaces": Array [
      "error",
      Object {
        "ignoreEOLComments": false,
      },
    ],
    "no-multi-str": Array [
      "error",
    ],
    "no-multiple-empty-lines": Array [
      "error",
      Object {
        "max": 2,
        "maxBOF": 1,
        "maxEOF": 0,
      },
    ],
    "no-native-reassign": Array [
      "off",
    ],
    "no-negated-condition": Array [
      "off",
    ],
    "no-negated-in-lhs": Array [
      "off",
    ],
    "no-nested-ternary": Array [
      "off",
    ],
    "no-new": Array [
      "error",
    ],
    "no-new-func": Array [
      "error",
    ],
    "no-new-object": Array [
      "error",
    ],
    "no-new-require": Array [
      "off",
    ],
    "no-new-symbol": Array [
      "error",
    ],
    "no-new-wrappers": Array [
      "error",
    ],
    "no-nonoctal-decimal-escape": Array [
      "error",
    ],
    "no-obj-calls": Array [
      "error",
    ],
    "no-octal": Array [
      "error",
    ],
    "no-octal-escape": Array [
      "error",
    ],
    "no-param-reassign": Array [
      "error",
      Object {
        "ignorePropertyModificationsFor": Array [
          "acc",
          "accumulator",
          "e",
          "ctx",
          "req",
          "request",
          "res",
          "response",
          "$scope",
          "staticContext",
        ],
        "props": true,
      },
    ],
    "no-path-concat": Array [
      "off",
    ],
    "no-plusplus": Array [
      "error",
    ],
    "no-process-env": Array [
      "off",
    ],
    "no-process-exit": Array [
      "off",
    ],
    "no-promise-executor-return": Array [
      "error",
    ],
    "no-proto": Array [
      "error",
    ],
    "no-prototype-builtins": Array [
      "error",
    ],
    "no-redeclare": Array [
      "error",
    ],
    "no-regex-spaces": Array [
      "error",
    ],
    "no-restricted-exports": Array [
      "off",
    ],
    "no-restricted-globals": Array [
      "error",
      "isFinite",
      "isNaN",
      "addEventListener",
      "blur",
      "close",
      "closed",
      "confirm",
      "defaultStatus",
      "defaultstatus",
      "event",
      "external",
      "find",
      "focus",
      "frameElement",
      "frames",
      "history",
      "innerHeight",
      "innerWidth",
      "length",
      "location",
      "locationbar",
      "menubar",
      "moveBy",
      "moveTo",
      "name",
      "onblur",
      "onerror",
      "onfocus",
      "onload",
      "onresize",
      "onunload",
      "open",
      "opener",
      "opera",
      "outerHeight",
      "outerWidth",
      "pageXOffset",
      "pageYOffset",
      "parent",
      "print",
      "removeEventListener",
      "resizeBy",
      "resizeTo",
      "screen",
      "screenLeft",
      "screenTop",
      "screenX",
      "screenY",
      "scroll",
      "scrollbars",
      "scrollBy",
      "scrollTo",
      "scrollX",
      "scrollY",
      "self",
      "status",
      "statusbar",
      "stop",
      "toolbar",
      "top",
    ],
    "no-restricted-imports": Array [
      "off",
      Object {
        "paths": Array [],
        "patterns": Array [],
      },
    ],
    "no-restricted-modules": Array [
      "off",
    ],
    "no-restricted-properties": Array [
      "error",
      Object {
        "message": "arguments.callee is deprecated",
        "object": "arguments",
        "property": "callee",
      },
      Object {
        "message": "Please use Number.isFinite instead",
        "object": "global",
        "property": "isFinite",
      },
      Object {
        "message": "Please use Number.isFinite instead",
        "object": "self",
        "property": "isFinite",
      },
      Object {
        "message": "Please use Number.isFinite instead",
        "object": "window",
        "property": "isFinite",
      },
      Object {
        "message": "Please use Number.isNaN instead",
        "object": "global",
        "property": "isNaN",
      },
      Object {
        "message": "Please use Number.isNaN instead",
        "object": "self",
        "property": "isNaN",
      },
      Object {
        "message": "Please use Number.isNaN instead",
        "object": "window",
        "property": "isNaN",
      },
      Object {
        "message": "Please use Object.defineProperty instead.",
        "property": "__defineGetter__",
      },
      Object {
        "message": "Please use Object.defineProperty instead.",
        "property": "__defineSetter__",
      },
      Object {
        "message": "Use the exponentiation operator (**) instead.",
        "object": "Math",
        "property": "pow",
      },
    ],
    "no-restricted-syntax": Array [
      "error",
      Object {
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.",
        "selector": "ForInStatement",
      },
      Object {
        "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.",
        "selector": "ForOfStatement",
      },
      Object {
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.",
        "selector": "LabeledStatement",
      },
      Object {
        "message": "\`with\` is disallowed in strict mode because it makes code impossible to predict and optimize.",
        "selector": "WithStatement",
      },
      Object {
        "message": "Please use the following notation: 'foo in bar;' => 'foo instanceof bar;'",
        "selector": "BinaryExpression[operator='in']",
      },
    ],
    "no-return-assign": Array [
      "error",
      "always",
    ],
    "no-return-await": Array [
      "error",
    ],
    "no-script-url": Array [
      "error",
    ],
    "no-self-assign": Array [
      "error",
      Object {
        "props": true,
      },
    ],
    "no-self-compare": Array [
      "error",
    ],
    "no-sequences": Array [
      "error",
    ],
    "no-setter-return": Array [
      "error",
    ],
    "no-shadow": Array [
      "error",
    ],
    "no-shadow-restricted-names": Array [
      "error",
    ],
    "no-spaced-func": Array [
      "off",
    ],
    "no-sparse-arrays": Array [
      "error",
    ],
    "no-sync": Array [
      "off",
    ],
    "no-tabs": Array [
      "error",
    ],
    "no-template-curly-in-string": Array [
      "error",
    ],
    "no-ternary": Array [
      "off",
    ],
    "no-this-before-super": Array [
      "error",
    ],
    "no-throw-literal": Array [
      "error",
    ],
    "no-trailing-spaces": Array [
      "error",
      Object {
        "ignoreComments": false,
        "skipBlankLines": false,
      },
    ],
    "no-undef": Array [
      "error",
    ],
    "no-undef-init": Array [
      "error",
    ],
    "no-undefined": Array [
      "off",
    ],
    "no-underscore-dangle": Array [
      "error",
      Object {
        "allow": Array [
          "__REDUX_DEVTOOLS_EXTENSION_COMPOSE__",
        ],
        "allowAfterSuper": false,
        "allowAfterThis": false,
        "allowAfterThisConstructor": false,
        "enforceInMethodNames": true,
      },
    ],
    "no-unexpected-multiline": Array [
      "error",
    ],
    "no-unmodified-loop-condition": Array [
      "off",
    ],
    "no-unneeded-ternary": Array [
      "error",
      Object {
        "defaultAssignment": false,
      },
    ],
    "no-unreachable": Array [
      "error",
    ],
    "no-unreachable-loop": Array [
      "error",
    ],
    "no-unsafe-finally": Array [
      "error",
    ],
    "no-unsafe-negation": Array [
      "error",
    ],
    "no-unsafe-optional-chaining": Array [
      "error",
    ],
    "no-unused-expressions": Array [
      "error",
      Object {
        "allowShortCircuit": false,
        "allowTaggedTemplates": false,
        "allowTernary": false,
      },
    ],
    "no-unused-labels": Array [
      "error",
    ],
    "no-unused-private-class-members": Array [
      "error",
    ],
    "no-unused-vars": Array [
      "error",
      Object {
        "args": "after-used",
        "ignoreRestSiblings": true,
        "vars": "all",
      },
    ],
    "no-use-before-define": Array [
      "error",
      Object {
        "classes": true,
        "functions": true,
        "variables": true,
      },
    ],
    "no-useless-backreference": Array [
      "off",
    ],
    "no-useless-call": Array [
      "off",
    ],
    "no-useless-catch": Array [
      "error",
    ],
    "no-useless-computed-key": Array [
      "error",
    ],
    "no-useless-concat": Array [
      "error",
    ],
    "no-useless-constructor": Array [
      "error",
    ],
    "no-useless-escape": Array [
      "error",
    ],
    "no-useless-rename": Array [
      "error",
      Object {
        "ignoreDestructuring": false,
        "ignoreExport": false,
        "ignoreImport": false,
      },
    ],
    "no-useless-return": Array [
      "error",
    ],
    "no-var": Array [
      "error",
    ],
    "no-void": Array [
      "error",
    ],
    "no-warning-comments": Array [
      "warn",
      Object {
        "location": "anywhere",
        "terms": Array [
          "todo",
          "fixme",
        ],
      },
    ],
    "no-whitespace-before-property": Array [
      "error",
    ],
    "no-with": Array [
      "error",
    ],
    "node/callback-return": Array [
      "off",
    ],
    "node/exports-style": Array [
      "error",
      "exports",
    ],
    "node/file-extension-in-import": Array [
      "error",
      "always",
      Object {
        ".js": "never",
        ".ts": "never",
        ".tsx": "never",
      },
    ],
    "node/global-require": Array [
      "error",
    ],
    "node/handle-callback-err": Array [
      "off",
    ],
    "node/no-callback-literal": Array [
      "off",
    ],
    "node/no-deprecated-api": Array [
      "error",
    ],
    "node/no-exports-assign": Array [
      "error",
    ],
    "node/no-extraneous-import": Array [
      "error",
    ],
    "node/no-extraneous-require": Array [
      "error",
    ],
    "node/no-hide-core-modules": Array [
      "off",
    ],
    "node/no-missing-import": Array [
      "error",
      Object {
        "tryExtensions": Array [
          ".js",
          ".jsx",
          ".json",
        ],
      },
    ],
    "node/no-missing-require": Array [
      "error",
    ],
    "node/no-mixed-requires": Array [
      "off",
    ],
    "node/no-new-require": Array [
      "error",
    ],
    "node/no-path-concat": Array [
      "error",
    ],
    "node/no-process-env": Array [
      "off",
    ],
    "node/no-process-exit": Array [
      "error",
    ],
    "node/no-restricted-import": Array [
      "off",
    ],
    "node/no-restricted-require": Array [
      "off",
    ],
    "node/no-sync": Array [
      "error",
    ],
    "node/no-unpublished-bin": Array [
      "error",
    ],
    "node/no-unpublished-import": Array [
      "error",
    ],
    "node/no-unpublished-require": Array [
      "error",
    ],
    "node/no-unsupported-features": Array [
      "off",
    ],
    "node/no-unsupported-features/es-builtins": Array [
      "error",
    ],
    "node/no-unsupported-features/es-syntax": Array [
      "error",
      Object {
        "ignores": Array [
          "modules",
        ],
      },
    ],
    "node/no-unsupported-features/node-builtins": Array [
      "error",
    ],
    "node/prefer-global/buffer": Array [
      "error",
      "always",
    ],
    "node/prefer-global/console": Array [
      "error",
    ],
    "node/prefer-global/process": Array [
      "error",
    ],
    "node/prefer-global/text-decoder": Array [
      "error",
      "never",
    ],
    "node/prefer-global/text-encoder": Array [
      "error",
      "never",
    ],
    "node/prefer-global/url": Array [
      "error",
      "never",
    ],
    "node/prefer-global/url-search-params": Array [
      "error",
      "never",
    ],
    "node/prefer-promises/dns": Array [
      "error",
    ],
    "node/prefer-promises/fs": Array [
      "error",
    ],
    "node/process-exit-as-throw": Array [
      "error",
    ],
    "node/shebang": Array [
      "error",
      Object {
        "convertPath": Array [
          Object {
            "exclude": Array [
              "**/*.test.ts",
            ],
            "include": Array [
              "src/**/*.ts",
            ],
            "replace": Array [
              "^src/(.+)\\\\.ts$",
              "build/$1.js",
            ],
          },
          Object {
            "exclude": Array [
              "**/*.test.tsx",
            ],
            "include": Array [
              "src/**/*.tsx",
            ],
            "replace": Array [
              "^src/(.+)\\\\.tsx$",
              "build/$1.js",
            ],
          },
        ],
      },
    ],
    "nonblock-statement-body-position": Array [
      "error",
      "beside",
      Object {
        "overrides": Object {},
      },
    ],
    "object-curly-newline": Array [
      "error",
      Object {
        "consistent": true,
        "multiline": true,
      },
    ],
    "object-curly-spacing": Array [
      "error",
      "always",
    ],
    "object-property-newline": Array [
      "error",
      Object {
        "allowAllPropertiesOnSameLine": true,
        "allowMultiplePropertiesPerLine": false,
      },
    ],
    "object-shorthand": Array [
      "error",
      "always",
      Object {
        "avoidQuotes": true,
        "ignoreConstructors": false,
      },
    ],
    "one-var": Array [
      "error",
      "never",
    ],
    "one-var-declaration-per-line": Array [
      "error",
      "always",
    ],
    "operator-assignment": Array [
      "error",
      "always",
    ],
    "operator-linebreak": Array [
      "error",
      "after",
      Object {
        "overrides": Object {
          ":": "before",
          "?": "before",
          "|": "before",
        },
      },
    ],
    "padded-blocks": Array [
      "error",
      Object {
        "blocks": "never",
        "classes": "never",
        "switches": "never",
      },
      Object {
        "allowSingleLineBlocks": true,
      },
    ],
    "padding-line-between-statements": Array [
      "error",
      Object {
        "blankLine": "always",
        "next": Array [
          "return",
          "case",
          "const",
          "let",
          "block",
          "block-like",
          "function",
          "multiline-block-like",
          "multiline-expression",
        ],
        "prev": "*",
      },
      Object {
        "blankLine": "always",
        "next": "*",
        "prev": Array [
          "const",
          "let",
          "block",
          "block-like",
          "function",
          "multiline-block-like",
          "multiline-expression",
        ],
      },
      Object {
        "blankLine": "never",
        "next": "import",
        "prev": "import",
      },
      Object {
        "blankLine": "any",
        "next": Array [
          "const",
          "let",
          "var",
        ],
        "prev": Array [
          "const",
          "let",
          "var",
        ],
      },
    ],
    "prefer-arrow-callback": Array [
      "error",
      Object {
        "allowNamedFunctions": false,
        "allowUnboundThis": true,
      },
    ],
    "prefer-const": Array [
      "error",
      Object {
        "destructuring": "any",
        "ignoreReadBeforeAssign": true,
      },
    ],
    "prefer-destructuring": Array [
      "error",
      Object {
        "AssignmentExpression": Object {
          "array": true,
          "object": false,
        },
        "VariableDeclarator": Object {
          "array": false,
          "object": true,
        },
      },
      Object {
        "enforceForRenamedProperties": false,
      },
    ],
    "prefer-exponentiation-operator": Array [
      "off",
    ],
    "prefer-named-capture-group": Array [
      "off",
    ],
    "prefer-numeric-literals": Array [
      "error",
    ],
    "prefer-object-has-own": Array [
      "error",
    ],
    "prefer-object-spread": Array [
      "error",
    ],
    "prefer-promise-reject-errors": Array [
      "error",
      Object {
        "allowEmptyReject": true,
      },
    ],
    "prefer-reflect": Array [
      "off",
    ],
    "prefer-regex-literals": Array [
      "error",
    ],
    "prefer-rest-params": Array [
      "error",
    ],
    "prefer-spread": Array [
      "error",
    ],
    "prefer-template": Array [
      "error",
    ],
    "quote-props": Array [
      "error",
      "as-needed",
    ],
    "quotes": Array [
      "error",
      "single",
      Object {
        "avoidEscape": true,
      },
    ],
    "radix": Array [
      "error",
    ],
    "regexp/confusing-quantifier": Array [
      "error",
    ],
    "regexp/control-character-escape": Array [
      "error",
    ],
    "regexp/hexadecimal-escape": Array [
      "error",
      "never",
    ],
    "regexp/letter-case": Array [
      "error",
      Object {
        "caseInsensitive": "lowercase",
        "controlEscape": "uppercase",
        "hexadecimalEscape": "uppercase",
        "unicodeEscape": "uppercase",
      },
    ],
    "regexp/match-any": Array [
      "error",
    ],
    "regexp/negation": Array [
      "error",
    ],
    "regexp/no-assertion-capturing-group": Array [
      "off",
    ],
    "regexp/no-contradiction-with-assertion": Array [
      "error",
    ],
    "regexp/no-control-character": Array [
      "error",
    ],
    "regexp/no-dupe-characters-character-class": Array [
      "error",
    ],
    "regexp/no-dupe-disjunctions": Array [
      "error",
    ],
    "regexp/no-empty-alternative": Array [
      "error",
    ],
    "regexp/no-empty-capturing-group": Array [
      "error",
    ],
    "regexp/no-empty-character-class": Array [
      "error",
    ],
    "regexp/no-empty-group": Array [
      "error",
    ],
    "regexp/no-empty-lookarounds-assertion": Array [
      "error",
    ],
    "regexp/no-escape-backspace": Array [
      "error",
    ],
    "regexp/no-invalid-regexp": Array [
      "error",
    ],
    "regexp/no-invisible-character": Array [
      "error",
    ],
    "regexp/no-lazy-ends": Array [
      "error",
    ],
    "regexp/no-legacy-features": Array [
      "error",
    ],
    "regexp/no-misleading-unicode-character": Array [
      "error",
    ],
    "regexp/no-non-standard-flag": Array [
      "error",
    ],
    "regexp/no-obscure-range": Array [
      "error",
    ],
    "regexp/no-octal": Array [
      "error",
    ],
    "regexp/no-optional-assertion": Array [
      "error",
    ],
    "regexp/no-potentially-useless-backreference": Array [
      "error",
    ],
    "regexp/no-standalone-backslash": Array [
      "off",
    ],
    "regexp/no-super-linear-backtracking": Array [
      "error",
    ],
    "regexp/no-super-linear-move": Array [
      "off",
    ],
    "regexp/no-trivially-nested-assertion": Array [
      "error",
    ],
    "regexp/no-trivially-nested-quantifier": Array [
      "error",
    ],
    "regexp/no-unused-capturing-group": Array [
      "error",
    ],
    "regexp/no-useless-assertions": Array [
      "error",
    ],
    "regexp/no-useless-backreference": Array [
      "error",
    ],
    "regexp/no-useless-character-class": Array [
      "error",
    ],
    "regexp/no-useless-dollar-replacements": Array [
      "error",
    ],
    "regexp/no-useless-escape": Array [
      "error",
    ],
    "regexp/no-useless-exactly-quantifier": Array [
      "off",
    ],
    "regexp/no-useless-flag": Array [
      "error",
    ],
    "regexp/no-useless-lazy": Array [
      "error",
    ],
    "regexp/no-useless-non-capturing-group": Array [
      "error",
    ],
    "regexp/no-useless-non-greedy": Array [
      "off",
    ],
    "regexp/no-useless-quantifier": Array [
      "error",
    ],
    "regexp/no-useless-range": Array [
      "error",
    ],
    "regexp/no-useless-two-nums-quantifier": Array [
      "error",
    ],
    "regexp/no-zero-quantifier": Array [
      "error",
    ],
    "regexp/optimal-lookaround-quantifier": Array [
      "error",
    ],
    "regexp/optimal-quantifier-concatenation": Array [
      "error",
    ],
    "regexp/order-in-character-class": Array [
      "off",
    ],
    "regexp/prefer-character-class": Array [
      "error",
    ],
    "regexp/prefer-d": Array [
      "error",
    ],
    "regexp/prefer-escape-replacement-dollar-char": Array [
      "error",
    ],
    "regexp/prefer-lookaround": Array [
      "error",
    ],
    "regexp/prefer-named-backreference": Array [
      "off",
    ],
    "regexp/prefer-named-capture-group": Array [
      "off",
    ],
    "regexp/prefer-named-replacement": Array [
      "off",
    ],
    "regexp/prefer-plus-quantifier": Array [
      "error",
    ],
    "regexp/prefer-predefined-assertion": Array [
      "error",
    ],
    "regexp/prefer-quantifier": Array [
      "error",
    ],
    "regexp/prefer-question-quantifier": Array [
      "error",
    ],
    "regexp/prefer-range": Array [
      "error",
    ],
    "regexp/prefer-regexp-exec": Array [
      "off",
    ],
    "regexp/prefer-regexp-test": Array [
      "error",
    ],
    "regexp/prefer-result-array-groups": Array [
      "error",
    ],
    "regexp/prefer-star-quantifier": Array [
      "error",
    ],
    "regexp/prefer-t": Array [
      "off",
    ],
    "regexp/prefer-unicode-codepoint-escapes": Array [
      "error",
    ],
    "regexp/prefer-w": Array [
      "error",
    ],
    "regexp/require-unicode-regexp": Array [
      "error",
    ],
    "regexp/sort-alternatives": Array [
      "error",
    ],
    "regexp/sort-character-class-elements": Array [
      "error",
    ],
    "regexp/sort-flags": Array [
      "error",
    ],
    "regexp/strict": Array [
      "error",
    ],
    "regexp/unicode-escape": Array [
      "error",
    ],
    "regexp/use-ignore-case": Array [
      "error",
    ],
    "require-atomic-updates": Array [
      "off",
    ],
    "require-await": Array [
      "error",
    ],
    "require-jsdoc": Array [
      "off",
    ],
    "require-unicode-regexp": Array [
      "error",
    ],
    "require-yield": Array [
      "error",
    ],
    "rest-spread-spacing": Array [
      "error",
      "never",
    ],
    "semi": Array [
      "error",
      "always",
    ],
    "semi-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "semi-style": Array [
      "error",
      "last",
    ],
    "sonarjs/cognitive-complexity": Array [
      "error",
      15,
    ],
    "sonarjs/elseif-without-else": Array [
      "off",
    ],
    "sonarjs/max-switch-cases": Array [
      "error",
    ],
    "sonarjs/no-all-duplicated-branches": Array [
      "error",
    ],
    "sonarjs/no-collapsible-if": Array [
      "error",
    ],
    "sonarjs/no-collection-size-mischeck": Array [
      "error",
    ],
    "sonarjs/no-duplicate-string": Array [
      "error",
      10,
    ],
    "sonarjs/no-duplicated-branches": Array [
      "error",
    ],
    "sonarjs/no-element-overwrite": Array [
      "error",
    ],
    "sonarjs/no-empty-collection": Array [
      "off",
    ],
    "sonarjs/no-extra-arguments": Array [
      "error",
    ],
    "sonarjs/no-gratuitous-expressions": Array [
      "error",
    ],
    "sonarjs/no-identical-conditions": Array [
      "error",
    ],
    "sonarjs/no-identical-expressions": Array [
      "error",
    ],
    "sonarjs/no-identical-functions": Array [
      "error",
    ],
    "sonarjs/no-ignored-return": Array [
      "error",
    ],
    "sonarjs/no-inverted-boolean-check": Array [
      "error",
    ],
    "sonarjs/no-nested-switch": Array [
      "error",
    ],
    "sonarjs/no-nested-template-literals": Array [
      "error",
    ],
    "sonarjs/no-one-iteration-loop": Array [
      "error",
    ],
    "sonarjs/no-redundant-boolean": Array [
      "error",
    ],
    "sonarjs/no-redundant-jump": Array [
      "error",
    ],
    "sonarjs/no-same-line-conditional": Array [
      "error",
    ],
    "sonarjs/no-small-switch": Array [
      "error",
    ],
    "sonarjs/no-unused-collection": Array [
      "error",
    ],
    "sonarjs/no-use-of-empty-return-value": Array [
      "error",
    ],
    "sonarjs/no-useless-catch": Array [
      "error",
    ],
    "sonarjs/non-existent-operator": Array [
      "error",
    ],
    "sonarjs/prefer-immediate-return": Array [
      "error",
    ],
    "sonarjs/prefer-object-literal": Array [
      "error",
    ],
    "sonarjs/prefer-single-boolean-return": Array [
      "error",
    ],
    "sonarjs/prefer-while": Array [
      "error",
    ],
    "sort-imports": Array [
      "off",
      Object {
        "ignoreCase": false,
        "ignoreDeclarationSort": false,
        "ignoreMemberSort": false,
        "memberSyntaxSortOrder": Array [
          "none",
          "all",
          "multiple",
          "single",
        ],
      },
    ],
    "sort-keys": Array [
      "off",
      "asc",
      Object {
        "caseSensitive": false,
        "natural": true,
      },
    ],
    "sort-vars": Array [
      "off",
    ],
    "space-before-blocks": Array [
      "error",
    ],
    "space-before-function-paren": Array [
      "error",
      Object {
        "anonymous": "always",
        "asyncArrow": "always",
        "named": "never",
      },
    ],
    "space-in-parens": Array [
      "error",
      "never",
    ],
    "space-infix-ops": Array [
      "error",
    ],
    "space-unary-ops": Array [
      "error",
      Object {
        "nonwords": false,
        "overrides": Object {},
        "words": true,
      },
    ],
    "spaced-comment": Array [
      "error",
      "always",
      Object {
        "block": Object {
          "balanced": true,
          "exceptions": Array [
            "-",
            "+",
          ],
          "markers": Array [
            "=",
            "!",
            ":",
            "::",
          ],
        },
        "line": Object {
          "exceptions": Array [
            "-",
            "+",
          ],
          "markers": Array [
            "=",
            "!",
          ],
        },
      },
    ],
    "strict": Array [
      "error",
      "never",
    ],
    "switch-colon-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "symbol-description": Array [
      "error",
    ],
    "template-curly-spacing": Array [
      "error",
    ],
    "template-tag-spacing": Array [
      "error",
      "never",
    ],
    "unicode-bom": Array [
      "error",
      "never",
    ],
    "unicorn/better-regex": Array [
      "off",
    ],
    "unicorn/catch-error-name": Array [
      "error",
    ],
    "unicorn/consistent-destructuring": Array [
      "error",
    ],
    "unicorn/consistent-function-scoping": Array [
      "error",
    ],
    "unicorn/custom-error-definition": Array [
      "off",
    ],
    "unicorn/empty-brace-spaces": Array [
      "error",
    ],
    "unicorn/error-message": Array [
      "error",
    ],
    "unicorn/escape-case": Array [
      "error",
    ],
    "unicorn/expiring-todo-comments": Array [
      "error",
    ],
    "unicorn/explicit-length-check": Array [
      "error",
    ],
    "unicorn/filename-case": Array [
      "error",
      Object {
        "case": "camelCase",
      },
    ],
    "unicorn/import-index": Array [
      "error",
    ],
    "unicorn/import-style": Array [
      "error",
      Object {
        "styles": Object {
          "chalk": false,
          "path": Object {
            "named": true,
          },
        },
      },
    ],
    "unicorn/new-for-builtins": Array [
      "error",
    ],
    "unicorn/no-abusive-eslint-disable": Array [
      "error",
    ],
    "unicorn/no-array-callback-reference": Array [
      "error",
    ],
    "unicorn/no-array-for-each": Array [
      "off",
    ],
    "unicorn/no-array-method-this-argument": Array [
      "error",
    ],
    "unicorn/no-array-push-push": Array [
      "error",
    ],
    "unicorn/no-array-reduce": Array [
      "off",
    ],
    "unicorn/no-await-expression-member": Array [
      "error",
    ],
    "unicorn/no-console-spaces": Array [
      "error",
    ],
    "unicorn/no-document-cookie": Array [
      "error",
    ],
    "unicorn/no-empty-file": Array [
      "error",
    ],
    "unicorn/no-for-loop": Array [
      "error",
    ],
    "unicorn/no-hex-escape": Array [
      "error",
    ],
    "unicorn/no-instanceof-array": Array [
      "error",
    ],
    "unicorn/no-invalid-remove-event-listener": Array [
      "error",
    ],
    "unicorn/no-keyword-prefix": Array [
      "off",
    ],
    "unicorn/no-lonely-if": Array [
      "error",
    ],
    "unicorn/no-nested-ternary": Array [
      "error",
    ],
    "unicorn/no-new-array": Array [
      "error",
    ],
    "unicorn/no-new-buffer": Array [
      "error",
    ],
    "unicorn/no-null": Array [
      "error",
    ],
    "unicorn/no-object-as-default-parameter": Array [
      "off",
    ],
    "unicorn/no-process-exit": Array [
      "error",
    ],
    "unicorn/no-static-only-class": Array [
      "error",
    ],
    "unicorn/no-thenable": Array [
      "error",
    ],
    "unicorn/no-this-assignment": Array [
      "error",
    ],
    "unicorn/no-unreadable-array-destructuring": Array [
      "error",
    ],
    "unicorn/no-unreadable-iife": Array [
      "error",
    ],
    "unicorn/no-unsafe-regex": Array [
      "off",
    ],
    "unicorn/no-unused-properties": Array [
      "off",
    ],
    "unicorn/no-useless-fallback-in-spread": Array [
      "error",
    ],
    "unicorn/no-useless-length-check": Array [
      "error",
    ],
    "unicorn/no-useless-promise-resolve-reject": Array [
      "error",
    ],
    "unicorn/no-useless-spread": Array [
      "error",
    ],
    "unicorn/no-useless-switch-case": Array [
      "error",
    ],
    "unicorn/no-useless-undefined": Array [
      "error",
    ],
    "unicorn/no-zero-fractions": Array [
      "error",
    ],
    "unicorn/number-literal-case": Array [
      "error",
    ],
    "unicorn/numeric-separators-style": Array [
      "error",
      Object {
        "binary": Object {
          "groupLength": 4,
          "minimumDigits": 0,
        },
        "hexadecimal": Object {
          "groupLength": 2,
          "minimumDigits": 0,
        },
        "number": Object {
          "groupLength": 3,
          "minimumDigits": 5,
        },
        "octal": Object {
          "groupLength": 4,
          "minimumDigits": 0,
        },
        "onlyIfContainsSeparator": false,
      },
    ],
    "unicorn/prefer-add-event-listener": Array [
      "error",
    ],
    "unicorn/prefer-array-find": Array [
      "error",
    ],
    "unicorn/prefer-array-flat": Array [
      "error",
    ],
    "unicorn/prefer-array-flat-map": Array [
      "error",
    ],
    "unicorn/prefer-array-index-of": Array [
      "error",
    ],
    "unicorn/prefer-array-some": Array [
      "error",
    ],
    "unicorn/prefer-at": Array [
      "error",
      Object {
        "checkAllIndexAccess": true,
      },
    ],
    "unicorn/prefer-code-point": Array [
      "error",
    ],
    "unicorn/prefer-date-now": Array [
      "error",
    ],
    "unicorn/prefer-default-parameters": Array [
      "error",
    ],
    "unicorn/prefer-dom-node-append": Array [
      "error",
    ],
    "unicorn/prefer-dom-node-dataset": Array [
      "error",
    ],
    "unicorn/prefer-dom-node-remove": Array [
      "error",
    ],
    "unicorn/prefer-dom-node-text-content": Array [
      "error",
    ],
    "unicorn/prefer-export-from": Array [
      "error",
      Object {
        "ignoreUsedVariables": true,
      },
    ],
    "unicorn/prefer-includes": Array [
      "error",
    ],
    "unicorn/prefer-json-parse-buffer": Array [
      "error",
    ],
    "unicorn/prefer-keyboard-event-key": Array [
      "error",
    ],
    "unicorn/prefer-math-trunc": Array [
      "error",
    ],
    "unicorn/prefer-modern-dom-apis": Array [
      "error",
    ],
    "unicorn/prefer-modern-math-apis": Array [
      "error",
    ],
    "unicorn/prefer-module": Array [
      "off",
    ],
    "unicorn/prefer-native-coercion-functions": Array [
      "error",
    ],
    "unicorn/prefer-negative-index": Array [
      "error",
    ],
    "unicorn/prefer-node-protocol": Array [
      "off",
    ],
    "unicorn/prefer-number-properties": Array [
      "error",
    ],
    "unicorn/prefer-object-from-entries": Array [
      "error",
    ],
    "unicorn/prefer-optional-catch-binding": Array [
      "error",
    ],
    "unicorn/prefer-prototype-methods": Array [
      "error",
    ],
    "unicorn/prefer-query-selector": Array [
      "error",
    ],
    "unicorn/prefer-reflect-apply": Array [
      "error",
    ],
    "unicorn/prefer-regexp-test": Array [
      "error",
    ],
    "unicorn/prefer-set-has": Array [
      "error",
    ],
    "unicorn/prefer-spread": Array [
      "error",
    ],
    "unicorn/prefer-string-replace-all": Array [
      "error",
    ],
    "unicorn/prefer-string-slice": Array [
      "error",
    ],
    "unicorn/prefer-string-starts-ends-with": Array [
      "error",
    ],
    "unicorn/prefer-string-trim-start-end": Array [
      "error",
    ],
    "unicorn/prefer-switch": Array [
      "error",
    ],
    "unicorn/prefer-ternary": Array [
      "error",
      "only-single-line",
    ],
    "unicorn/prefer-top-level-await": Array [
      "off",
    ],
    "unicorn/prefer-type-error": Array [
      "error",
    ],
    "unicorn/prevent-abbreviations": Array [
      "error",
      Object {
        "allowList": Object {
          "Params": true,
          "Props": true,
          "Ref": true,
          "args": true,
          "cmd": true,
          "env": true,
          "i": true,
          "msg": true,
          "n": true,
          "params": true,
          "props": true,
          "ref": true,
        },
      },
    ],
    "unicorn/relative-url-style": Array [
      "error",
    ],
    "unicorn/require-array-join-separator": Array [
      "error",
    ],
    "unicorn/require-number-to-fixed-digits-argument": Array [
      "error",
    ],
    "unicorn/require-post-message-target-origin": Array [
      "off",
    ],
    "unicorn/string-content": Array [
      "off",
    ],
    "unicorn/template-indent": Array [
      "off",
    ],
    "unicorn/text-encoding-identifier-case": Array [
      "error",
    ],
    "unicorn/throw-new-error": Array [
      "error",
    ],
    "use-isnan": Array [
      "error",
    ],
    "valid-jsdoc": Array [
      "off",
    ],
    "valid-typeof": Array [
      "error",
      Object {
        "requireStringLiterals": true,
      },
    ],
    "vars-on-top": Array [
      "error",
    ],
    "wrap-iife": Array [
      "error",
      "outside",
      Object {
        "functionPrototypeMethods": false,
      },
    ],
    "wrap-regex": Array [
      "off",
    ],
    "yield-star-spacing": Array [
      "error",
      "after",
    ],
    "yoda": Array [
      "error",
      "never",
      Object {
        "exceptRange": true,
        "onlyEquality": true,
      },
    ],
  },
  "settings": Object {
    "import/extensions": Array [
      ".js",
    ],
    "import/resolver": Object {
      "node": Object {
        "extensions": Array [
          ".js",
        ],
      },
    },
  },
}
`;

exports[`createConfig() it should work and hasLibrary returns true 1`] = `
Object {
  "env": Object {
    "es2022": true,
    "jest": true,
    "jest/globals": true,
    "node": true,
  },
  "globals": Object {
    "ArrayBuffer": "readonly",
    "Atomics": "readonly",
    "BigInt": "readonly",
    "BigInt64Array": "readonly",
    "BigUint64Array": "readonly",
    "Buffer": "readonly",
    "DataView": "readonly",
    "Float32Array": "readonly",
    "Float64Array": "readonly",
    "GLOBAL": "readonly",
    "Int16Array": "readonly",
    "Int32Array": "readonly",
    "Int8Array": "readonly",
    "Intl": "readonly",
    "Map": "readonly",
    "Promise": "readonly",
    "Proxy": "readonly",
    "Reflect": "readonly",
    "Set": "readonly",
    "SharedArrayBuffer": "readonly",
    "Symbol": "readonly",
    "TextDecoder": "readonly",
    "TextEncoder": "readonly",
    "URL": "readonly",
    "URLSearchParams": "readonly",
    "Uint16Array": "readonly",
    "Uint32Array": "readonly",
    "Uint8Array": "readonly",
    "Uint8ClampedArray": "readonly",
    "WeakMap": "readonly",
    "WeakSet": "readonly",
    "WebAssembly": "readonly",
    "__dirname": "readonly",
    "__filename": "readonly",
    "clearImmediate": "readonly",
    "clearInterval": "readonly",
    "clearTimeout": "readonly",
    "console": "readonly",
    "exports": "writable",
    "global": "readonly",
    "globalThis": "readonly",
    "module": "readonly",
    "process": "readonly",
    "queueMicrotask": "readonly",
    "require": "readonly",
    "root": "readonly",
    "setImmediate": "readonly",
    "setInterval": "readonly",
    "setTimeout": "readonly",
  },
  "overrides": Array [
    Object {
      "files": Array [
        "*.js",
      ],
      "rules": Object {
        "node/exports-style": Array [
          "error",
          "module.exports",
        ],
      },
    },
    Object {
      "files": Array [
        "*.ts",
        "*.tsx",
      ],
      "globals": Object {
        "exports": "off",
        "module": "off",
        "require": "off",
      },
      "rules": Object {
        "node/no-missing-import": Array [
          "error",
          Object {
            "tryExtensions": Array [
              ".js",
              ".jsx",
              ".json",
              ".ts",
              ".tsx",
            ],
          },
        ],
      },
    },
    Object {
      "files": Array [
        "**/src/index.js",
        "**/src/index.ts",
      ],
      "rules": Object {
        "node/no-sync": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "*.ts",
        "*.tsx",
      ],
      "parser": "@typescript-eslint/parser",
      "parserOptions": Object {
        "project": "tsconfig.json",
      },
      "rules": Object {
        "@typescript-eslint/adjacent-overload-signatures": Array [
          "error",
        ],
        "@typescript-eslint/array-type": Array [
          "error",
          Object {
            "default": "array-simple",
          },
        ],
        "@typescript-eslint/await-thenable": Array [
          "error",
        ],
        "@typescript-eslint/ban-ts-comment": Array [
          "error",
        ],
        "@typescript-eslint/ban-tslint-comment": Array [
          "error",
        ],
        "@typescript-eslint/ban-types": Array [
          "error",
          Object {
            "types": Object {
              "Object": "Use {} instead",
            },
          },
        ],
        "@typescript-eslint/brace-style": Array [
          "error",
          "1tbs",
          Object {
            "allowSingleLine": true,
          },
        ],
        "@typescript-eslint/class-literal-property-style": Array [
          "off",
        ],
        "@typescript-eslint/comma-dangle": Array [
          "error",
          "always-multiline",
        ],
        "@typescript-eslint/comma-spacing": Array [
          "error",
          Object {
            "after": true,
            "before": false,
          },
        ],
        "@typescript-eslint/consistent-indexed-object-style": Array [
          "off",
        ],
        "@typescript-eslint/consistent-type-assertions": Array [
          "error",
        ],
        "@typescript-eslint/consistent-type-definitions": Array [
          "error",
          "type",
        ],
        "@typescript-eslint/consistent-type-imports": Array [
          "error",
          Object {
            "disallowTypeAnnotations": true,
            "prefer": "type-imports",
          },
        ],
        "@typescript-eslint/default-param-last": Array [
          "error",
        ],
        "@typescript-eslint/dot-notation": Array [
          "error",
          Object {
            "allowKeywords": true,
            "allowPattern": "",
          },
        ],
        "@typescript-eslint/explicit-function-return-type": Array [
          "off",
        ],
        "@typescript-eslint/explicit-member-accessibility": Array [
          "error",
          Object {
            "accessibility": "no-public",
          },
        ],
        "@typescript-eslint/explicit-module-boundary-types": Array [
          "error",
        ],
        "@typescript-eslint/func-call-spacing": Array [
          "error",
          "never",
        ],
        "@typescript-eslint/indent": Array [
          "error",
          2,
          Object {
            "FunctionDeclaration": Object {
              "parameters": "first",
            },
            "SwitchCase": 1,
            "flatTernaryExpressions": false,
            "ignoreComments": false,
            "ignoredNodes": Array [
              "TSTypeParameterInstantiation",
              "TSTypeReference",
            ],
          },
        ],
        "@typescript-eslint/init-declarations": Array [
          "off",
        ],
        "@typescript-eslint/keyword-spacing": Array [
          "error",
          Object {
            "after": true,
            "before": true,
            "overrides": Object {
              "case": Object {
                "after": true,
              },
              "return": Object {
                "after": true,
              },
              "throw": Object {
                "after": true,
              },
            },
          },
        ],
        "@typescript-eslint/lines-between-class-members": Array [
          "error",
          "always",
          Object {
            "exceptAfterSingleLine": false,
          },
        ],
        "@typescript-eslint/member-delimiter-style": Array [
          "error",
        ],
        "@typescript-eslint/member-ordering": Array [
          "off",
        ],
        "@typescript-eslint/method-signature-style": Array [
          "off",
        ],
        "@typescript-eslint/naming-convention": Array [
          "error",
          Object {
            "filter": Object {
              "match": false,
              "regex": "^(_id|toJSON)$",
            },
            "format": Array [
              "strictCamelCase",
              "StrictPascalCase",
            ],
            "selector": "default",
          },
          Object {
            "format": Array [
              "strictCamelCase",
              "StrictPascalCase",
            ],
            "leadingUnderscore": "allow",
            "selector": "parameter",
          },
          Object {
            "format": Array [
              "StrictPascalCase",
            ],
            "selector": "typeLike",
          },
          Object {
            "custom": Object {
              "match": false,
              "regex": "^I[A-Z]",
            },
            "format": Array [
              "PascalCase",
            ],
            "selector": "interface",
          },
          Object {
            "format": Array [
              "PascalCase",
            ],
            "prefix": Array [
              "is",
              "should",
              "has",
              "can",
              "did",
              "will",
            ],
            "selector": "variable",
            "types": Array [
              "boolean",
            ],
          },
        ],
        "@typescript-eslint/no-array-constructor": Array [
          "error",
        ],
        "@typescript-eslint/no-base-to-string": Array [
          "error",
        ],
        "@typescript-eslint/no-confusing-non-null-assertion": Array [
          "error",
        ],
        "@typescript-eslint/no-confusing-void-expression": Array [
          "error",
        ],
        "@typescript-eslint/no-dupe-class-members": Array [
          "error",
        ],
        "@typescript-eslint/no-duplicate-imports": Array [
          "error",
          Object {
            "includeExports": true,
          },
        ],
        "@typescript-eslint/no-dynamic-delete": Array [
          "off",
        ],
        "@typescript-eslint/no-empty-function": Array [
          "error",
        ],
        "@typescript-eslint/no-empty-interface": Array [
          "error",
        ],
        "@typescript-eslint/no-explicit-any": Array [
          "error",
        ],
        "@typescript-eslint/no-extra-non-null-assertion": Array [
          "error",
        ],
        "@typescript-eslint/no-extra-parens": Array [
          "off",
          "all",
          Object {
            "conditionalAssign": true,
            "enforceForArrowConditionals": false,
            "ignoreJSX": "all",
            "nestedBinaryExpressions": false,
            "returnAssign": false,
          },
        ],
        "@typescript-eslint/no-extra-semi": Array [
          "error",
        ],
        "@typescript-eslint/no-extraneous-class": Array [
          "off",
        ],
        "@typescript-eslint/no-floating-promises": Array [
          "error",
        ],
        "@typescript-eslint/no-for-in-array": Array [
          "error",
        ],
        "@typescript-eslint/no-implicit-any-catch": Array [
          "error",
          Object {
            "allowExplicitAny": false,
          },
        ],
        "@typescript-eslint/no-implied-eval": Array [
          "error",
        ],
        "@typescript-eslint/no-inferrable-types": Array [
          "error",
        ],
        "@typescript-eslint/no-invalid-this": Array [
          "off",
        ],
        "@typescript-eslint/no-invalid-void-type": Array [
          "off",
        ],
        "@typescript-eslint/no-loop-func": Array [
          "error",
        ],
        "@typescript-eslint/no-loss-of-precision": Array [
          "error",
        ],
        "@typescript-eslint/no-magic-numbers": Array [
          "off",
        ],
        "@typescript-eslint/no-meaningless-void-operator": Array [
          "error",
        ],
        "@typescript-eslint/no-misused-new": Array [
          "error",
        ],
        "@typescript-eslint/no-misused-promises": Array [
          "error",
        ],
        "@typescript-eslint/no-namespace": Array [
          "error",
        ],
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": Array [
          "error",
        ],
        "@typescript-eslint/no-non-null-asserted-optional-chain": Array [
          "error",
        ],
        "@typescript-eslint/no-non-null-assertion": Array [
          "warn",
        ],
        "@typescript-eslint/no-parameter-properties": Array [
          "off",
        ],
        "@typescript-eslint/no-redeclare": Array [
          "error",
        ],
        "@typescript-eslint/no-require-imports": Array [
          "error",
        ],
        "@typescript-eslint/no-restricted-imports": Array [
          "off",
        ],
        "@typescript-eslint/no-shadow": Array [
          "error",
        ],
        "@typescript-eslint/no-this-alias": Array [
          "error",
        ],
        "@typescript-eslint/no-throw-literal": Array [
          "error",
        ],
        "@typescript-eslint/no-type-alias": Array [
          "off",
        ],
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": Array [
          "error",
        ],
        "@typescript-eslint/no-unnecessary-condition": Array [
          "error",
          Object {
            "allowConstantLoopConditions": true,
          },
        ],
        "@typescript-eslint/no-unnecessary-qualifier": Array [
          "error",
        ],
        "@typescript-eslint/no-unnecessary-type-arguments": Array [
          "off",
        ],
        "@typescript-eslint/no-unnecessary-type-assertion": Array [
          "error",
        ],
        "@typescript-eslint/no-unnecessary-type-constraint": Array [
          "error",
        ],
        "@typescript-eslint/no-unsafe-argument": Array [
          "error",
        ],
        "@typescript-eslint/no-unsafe-assignment": Array [
          "error",
        ],
        "@typescript-eslint/no-unsafe-call": Array [
          "error",
        ],
        "@typescript-eslint/no-unsafe-member-access": Array [
          "error",
        ],
        "@typescript-eslint/no-unsafe-return": Array [
          "error",
        ],
        "@typescript-eslint/no-unused-expressions": Array [
          "error",
          Object {
            "allowShortCircuit": false,
            "allowTaggedTemplates": false,
            "allowTernary": false,
          },
        ],
        "@typescript-eslint/no-unused-vars": Array [
          "error",
        ],
        "@typescript-eslint/no-use-before-define": Array [
          "error",
        ],
        "@typescript-eslint/no-useless-constructor": Array [
          "error",
        ],
        "@typescript-eslint/no-var-requires": Array [
          "error",
        ],
        "@typescript-eslint/non-nullable-type-assertion-style": Array [
          "error",
        ],
        "@typescript-eslint/object-curly-spacing": Array [
          "error",
          "always",
        ],
        "@typescript-eslint/padding-line-between-statements": Array [
          "error",
          Object {
            "blankLine": "always",
            "next": Array [
              "return",
              "case",
              "const",
              "let",
              "block",
              "block-like",
              "function",
              "multiline-block-like",
              "multiline-expression",
            ],
            "prev": "*",
          },
          Object {
            "blankLine": "always",
            "next": "*",
            "prev": Array [
              "const",
              "let",
              "block",
              "block-like",
              "function",
              "multiline-block-like",
              "multiline-expression",
            ],
          },
          Object {
            "blankLine": "never",
            "next": "import",
            "prev": "import",
          },
          Object {
            "blankLine": "any",
            "next": Array [
              "const",
              "let",
              "var",
            ],
            "prev": Array [
              "const",
              "let",
              "var",
            ],
          },
        ],
        "@typescript-eslint/prefer-as-const": Array [
          "error",
        ],
        "@typescript-eslint/prefer-enum-initializers": Array [
          "error",
        ],
        "@typescript-eslint/prefer-for-of": Array [
          "off",
        ],
        "@typescript-eslint/prefer-function-type": Array [
          "error",
        ],
        "@typescript-eslint/prefer-includes": Array [
          "error",
        ],
        "@typescript-eslint/prefer-literal-enum-member": Array [
          "error",
        ],
        "@typescript-eslint/prefer-namespace-keyword": Array [
          "error",
        ],
        "@typescript-eslint/prefer-nullish-coalescing": Array [
          "error",
        ],
        "@typescript-eslint/prefer-optional-chain": Array [
          "error",
        ],
        "@typescript-eslint/prefer-readonly": Array [
          "off",
        ],
        "@typescript-eslint/prefer-readonly-parameter-types": Array [
          "off",
        ],
        "@typescript-eslint/prefer-reduce-type-parameter": Array [
          "error",
        ],
        "@typescript-eslint/prefer-regexp-exec": Array [
          "error",
        ],
        "@typescript-eslint/prefer-return-this-type": Array [
          "error",
        ],
        "@typescript-eslint/prefer-string-starts-ends-with": Array [
          "error",
        ],
        "@typescript-eslint/prefer-ts-expect-error": Array [
          "error",
        ],
        "@typescript-eslint/promise-function-async": Array [
          "error",
        ],
        "@typescript-eslint/quotes": Array [
          "error",
          "single",
          Object {
            "avoidEscape": true,
          },
        ],
        "@typescript-eslint/require-array-sort-compare": Array [
          "error",
          Object {
            "ignoreStringArrays": true,
          },
        ],
        "@typescript-eslint/require-await": Array [
          "error",
        ],
        "@typescript-eslint/restrict-plus-operands": Array [
          "error",
          Object {
            "checkCompoundAssignments": true,
          },
        ],
        "@typescript-eslint/restrict-template-expressions": Array [
          "error",
          Object {
            "allowNullish": true,
            "allowNumber": true,
          },
        ],
        "@typescript-eslint/return-await": Array [
          "error",
          "in-try-catch",
        ],
        "@typescript-eslint/semi": Array [
          "error",
          "always",
        ],
        "@typescript-eslint/sort-type-union-intersection-members": Array [
          "error",
        ],
        "@typescript-eslint/space-before-function-paren": Array [
          "error",
          Object {
            "anonymous": "always",
            "asyncArrow": "always",
            "named": "never",
          },
        ],
        "@typescript-eslint/space-infix-ops": Array [
          "error",
        ],
        "@typescript-eslint/strict-boolean-expressions": Array [
          "error",
          Object {
            "allowAny": false,
            "allowNullableBoolean": true,
            "allowNullableNumber": false,
            "allowNullableObject": true,
            "allowNullableString": false,
            "allowNumber": false,
            "allowString": false,
          },
        ],
        "@typescript-eslint/switch-exhaustiveness-check": Array [
          "error",
        ],
        "@typescript-eslint/triple-slash-reference": Array [
          "error",
        ],
        "@typescript-eslint/type-annotation-spacing": Array [
          "error",
        ],
        "@typescript-eslint/typedef": Array [
          "off",
        ],
        "@typescript-eslint/unbound-method": Array [
          "error",
        ],
        "@typescript-eslint/unified-signatures": Array [
          "off",
        ],
        "brace-style": Array [
          "off",
        ],
        "camelcase": Array [
          "off",
        ],
        "comma-dangle": Array [
          "off",
        ],
        "comma-spacing": Array [
          "off",
        ],
        "default-param-last": Array [
          "off",
        ],
        "dot-notation": Array [
          "off",
        ],
        "func-call-spacing": Array [
          "off",
        ],
        "getter-return": Array [
          "off",
        ],
        "indent": Array [
          "off",
        ],
        "init-declarations": Array [
          "off",
        ],
        "keyword-spacing": Array [
          "off",
        ],
        "lines-between-class-members": Array [
          "off",
        ],
        "no-array-constructor": Array [
          "off",
        ],
        "no-const-assign": Array [
          "off",
        ],
        "no-dupe-args": Array [
          "off",
        ],
        "no-dupe-class-members": Array [
          "off",
        ],
        "no-dupe-keys": Array [
          "off",
        ],
        "no-duplicate-imports": Array [
          "off",
        ],
        "no-empty-function": Array [
          "off",
        ],
        "no-extra-parens": Array [
          "off",
        ],
        "no-extra-semi": Array [
          "off",
        ],
        "no-implied-eval": Array [
          "off",
        ],
        "no-invalid-this": Array [
          "off",
        ],
        "no-loop-func": Array [
          "off",
        ],
        "no-loss-of-precision": Array [
          "off",
        ],
        "no-new-symbol": Array [
          "off",
        ],
        "no-redeclare": Array [
          "off",
        ],
        "no-restricted-imports": Array [
          "off",
        ],
        "no-return-await": Array [
          "off",
        ],
        "no-shadow": Array [
          "off",
        ],
        "no-this-before-super": Array [
          "off",
        ],
        "no-throw-literal": Array [
          "off",
        ],
        "no-undef": Array [
          "off",
        ],
        "no-unreachable": Array [
          "off",
        ],
        "no-unused-expressions": Array [
          "off",
        ],
        "no-unused-vars": Array [
          "off",
        ],
        "no-use-before-define": Array [
          "off",
        ],
        "no-useless-constructor": Array [
          "off",
        ],
        "no-var": Array [
          "error",
        ],
        "object-curly-spacing": Array [
          "off",
        ],
        "padding-line-between-statements": Array [
          "off",
        ],
        "prefer-const": Array [
          "error",
        ],
        "prefer-rest-params": Array [
          "error",
        ],
        "prefer-spread": Array [
          "error",
        ],
        "quotes": Array [
          "off",
        ],
        "require-await": Array [
          "off",
        ],
        "semi": Array [
          "off",
        ],
        "space-before-function-paren": Array [
          "off",
        ],
        "space-infix-ops": Array [
          "off",
        ],
        "valid-typeof": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "**/tests/**/*.test.js",
        "**/tests/**/*.test.ts",
        "**/tests/**/*.test.tsx",
      ],
      "rules": Object {
        "@typescript-eslint/no-empty-function": Array [
          "off",
        ],
        "@typescript-eslint/no-misused-promises": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "babel.config.js",
        "jest.config.js",
      ],
      "rules": Object {
        "import/extensions": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "**/src/index.js",
        "**/src/index.ts",
        "**/src/bin/**/*",
      ],
      "rules": Object {
        "import/no-unused-modules": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "**/index.js",
        "**/index.ts",
      ],
      "rules": Object {
        "import/max-dependencies": Array [
          "error",
          Object {
            "max": 30,
          },
        ],
      },
    },
    Object {
      "files": Array [
        "*.js",
      ],
      "rules": Object {
        "import/no-unused-modules": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "*.ts",
        "*.tsx",
      ],
      "rules": Object {
        "import/named": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "pages/**/*.tsx",
      ],
      "rules": Object {
        "import/no-default-export": Array [
          "off",
        ],
        "import/no-unused-modules": Array [
          "error",
          Object {
            "missingExports": true,
            "unusedExports": false,
          },
        ],
        "import/prefer-default-export": Array [
          "error",
        ],
      },
    },
    Object {
      "files": Array [
        "**/src/modules/**/actions/**/*.js",
        "**/src/modules/**/actions/**/*.ts",
        "**/src/modules/**/reducers/**/*.js",
        "**/src/modules/**/reducers/**/*.ts",
      ],
      "rules": Object {
        "import/no-cycle": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "*.test.js",
        "*.test.ts",
        "*.test.tsx",
      ],
      "rules": Object {
        "import/no-unused-modules": Array [
          "error",
          Object {
            "missingExports": false,
            "unusedExports": true,
          },
        ],
      },
    },
    Object {
      "files": Array [
        "**/tests/type/**/*.test.ts",
        "**/tests/type/**/*.test.tsx",
      ],
      "rules": Object {
        "import/no-unused-modules": Array [
          "error",
          Object {
            "missingExports": false,
            "unusedExports": true,
          },
        ],
      },
    },
    Object {
      "files": Array [
        "**/tests/*/pre.ts",
        "**/tests/*/post.ts",
        "**/tests/*/pre.js",
        "**/tests/*/post.js",
      ],
      "rules": Object {
        "import/no-unused-modules": Array [
          "error",
          Object {
            "missingExports": false,
            "unusedExports": true,
          },
        ],
      },
    },
    Object {
      "files": Array [
        "**/tests/shared/__mock__/*",
      ],
      "rules": Object {
        "import/group-exports": Array [
          "off",
        ],
        "import/no-default-export": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "**/tests/type/**/*.test.ts",
      ],
      "rules": Object {
        "import/group-exports": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "*.ts",
        "*.tsx",
      ],
      "rules": Object {
        "unicorn/no-array-callback-reference": Array [
          "off",
        ],
      },
    },
    Object {
      "excludedFiles": Array [
        "index.tsx",
        "index.test.tsx",
        "_app.tsx",
        "_document.tsx",
      ],
      "files": Array [
        "*.tsx",
      ],
      "rules": Object {
        "unicorn/filename-case": Array [
          "error",
          Object {
            "case": "pascalCase",
          },
        ],
      },
    },
    Object {
      "excludedFiles": Array [
        "_app.tsx",
        "_document.tsx",
      ],
      "files": Array [
        "*.tsx",
      ],
      "rules": Object {
        "unicorn/no-null": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "**/tests/**/*.test.js",
        "**/tests/**/*.test.ts",
        "**/tests/**/*.test.tsx",
      ],
      "rules": Object {
        "unicorn/no-null": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "pages/**/*.tsx",
      ],
      "rules": Object {
        "unicorn/filename-case": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "*.test.js",
        "*.test.ts",
        "*.test.tsx",
      ],
      "rules": Object {
        "sonarjs/no-identical-functions": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "**/tests/**/*.js",
        "**/tests/**/*.ts",
        "**/tests/**/*.tsx",
        "**/*.test.js",
        "**/*.test.ts",
        "**/*.test.tsx",
      ],
      "rules": Object {
        "jest/consistent-test-it": Array [
          "error",
          Object {
            "fn": "test",
            "withinDescribe": "test",
          },
        ],
        "jest/expect-expect": Array [
          "warn",
        ],
        "jest/max-nested-describe": Array [
          "error",
          Object {
            "max": 5,
          },
        ],
        "jest/no-alias-methods": Array [
          "error",
        ],
        "jest/no-commented-out-tests": Array [
          "warn",
        ],
        "jest/no-conditional-expect": Array [
          "error",
        ],
        "jest/no-conditional-in-test": Array [
          "off",
        ],
        "jest/no-deprecated-functions": Array [
          "error",
        ],
        "jest/no-disabled-tests": Array [
          "warn",
        ],
        "jest/no-done-callback": Array [
          "error",
        ],
        "jest/no-duplicate-hooks": Array [
          "off",
        ],
        "jest/no-export": Array [
          "error",
        ],
        "jest/no-focused-tests": Array [
          "error",
        ],
        "jest/no-hooks": Array [
          "off",
        ],
        "jest/no-identical-title": Array [
          "error",
        ],
        "jest/no-if": Array [
          "off",
        ],
        "jest/no-interpolation-in-snapshots": Array [
          "error",
        ],
        "jest/no-jasmine-globals": Array [
          "error",
        ],
        "jest/no-jest-import": Array [
          "error",
        ],
        "jest/no-large-snapshots": Array [
          "off",
        ],
        "jest/no-mocks-import": Array [
          "error",
        ],
        "jest/no-restricted-matchers": Array [
          "off",
        ],
        "jest/no-standalone-expect": Array [
          "error",
        ],
        "jest/no-test-prefixes": Array [
          "error",
        ],
        "jest/no-test-return-statement": Array [
          "error",
        ],
        "jest/prefer-called-with": Array [
          "error",
        ],
        "jest/prefer-comparison-matcher": Array [
          "error",
        ],
        "jest/prefer-equality-matcher": Array [
          "error",
        ],
        "jest/prefer-expect-assertions": Array [
          "off",
        ],
        "jest/prefer-expect-resolves": Array [
          "error",
        ],
        "jest/prefer-hooks-on-top": Array [
          "error",
        ],
        "jest/prefer-lowercase-title": Array [
          "error",
        ],
        "jest/prefer-snapshot-hint": Array [
          "off",
        ],
        "jest/prefer-spy-on": Array [
          "off",
        ],
        "jest/prefer-strict-equal": Array [
          "off",
        ],
        "jest/prefer-to-be": Array [
          "error",
        ],
        "jest/prefer-to-contain": Array [
          "error",
        ],
        "jest/prefer-to-have-length": Array [
          "error",
        ],
        "jest/prefer-todo": Array [
          "error",
        ],
        "jest/require-hook": Array [
          "off",
        ],
        "jest/require-to-throw-message": Array [
          "error",
        ],
        "jest/require-top-level-describe": Array [
          "error",
        ],
        "jest/unbound-method": Array [
          "off",
        ],
        "jest/valid-describe-callback": Array [
          "error",
        ],
        "jest/valid-expect": Array [
          "error",
        ],
        "jest/valid-expect-in-promise": Array [
          "error",
        ],
        "jest/valid-title": Array [
          "error",
        ],
      },
    },
    Object {
      "files": Array [
        "**/tests/*/pre.ts",
        "**/tests/*/post.ts",
        "**/tests/*/setupTests.ts",
        "**/tests/*/pre.js",
        "**/tests/*/post.js",
        "**/tests/*/setupTests.js",
      ],
      "rules": Object {
        "no-console": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "**/tests/**/*.ts",
        "**/tests/**/*.tsx",
        "**/*.test.ts",
        "**/*.test.tsx",
      ],
      "rules": Object {
        "@typescript-eslint/unbound-method": Array [
          "off",
        ],
        "jest/unbound-method": Array [
          "error",
        ],
      },
    },
    Object {
      "files": Array [
        "*.test.ts",
        "*.test.tsx",
      ],
      "rules": Object {
        "@typescript-eslint/no-explicit-any": Array [
          "off",
        ],
        "@typescript-eslint/no-floating-promises": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "**/tests/**/*.test.js",
        "**/tests/**/*.test.ts",
        "**/tests/**/*.test.tsx",
        "**/tests/*/setupTests.ts",
        "**/tests/*/setupTests.js",
      ],
      "rules": Object {
        "@typescript-eslint/no-explicit-any": Array [
          "off",
        ],
        "import/no-unused-modules": Array [
          "off",
        ],
        "node/global-require": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "**/tests/*/setupTests.ts",
        "**/tests/*/setupTests.js",
      ],
      "rules": Object {
        "jest/require-top-level-describe": Array [
          "off",
        ],
      },
    },
    Object {
      "files": Array [
        "**/tests/shared/__mock__/*.ts",
      ],
      "rules": Object {
        "@typescript-eslint/no-explicit-any": Array [
          "off",
        ],
        "@typescript-eslint/require-await": Array [
          "off",
        ],
        "import/no-anonymous-default-export": Array [
          "off",
        ],
        "import/no-import-module-exports": Array [
          "off",
        ],
        "import/no-unused-modules": Array [
          "off",
        ],
        "import/prefer-default-export": Array [
          "off",
        ],
        "jest/no-standalone-expect": Array [
          "off",
        ],
      },
    },
  ],
  "parser": undefined,
  "parserOptions": Object {
    "ecmaFeatures": Object {
      "globalReturn": false,
      "impliedStrict": false,
      "jsx": true,
    },
    "ecmaVersion": "latest",
    "sourceType": "module",
  },
  "plugins": Array [
    "node",
    "@typescript-eslint",
    "formatjs",
    "import",
    "unicorn",
    "eslint-comments",
    "sonarjs",
    "regexp",
    "react",
    "react-hooks",
    "jsx-a11y",
    "jest",
    "testing-library",
    "jest-dom",
  ],
  "rules": Object {
    "accessor-pairs": Array [
      "off",
    ],
    "array-bracket-newline": Array [
      "off",
      "consistent",
    ],
    "array-bracket-spacing": Array [
      "error",
      "never",
    ],
    "array-callback-return": Array [
      "error",
      Object {
        "allowImplicit": true,
      },
    ],
    "array-element-newline": Array [
      "off",
      Object {
        "minItems": 3,
        "multiline": true,
      },
    ],
    "arrow-body-style": Array [
      "error",
      "as-needed",
    ],
    "arrow-parens": Array [
      "error",
      "always",
    ],
    "arrow-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": true,
      },
    ],
    "block-scoped-var": Array [
      "error",
    ],
    "block-spacing": Array [
      "error",
      "always",
    ],
    "brace-style": Array [
      "error",
      "1tbs",
      Object {
        "allowSingleLine": true,
      },
    ],
    "callback-return": Array [
      "off",
    ],
    "camelcase": Array [
      "error",
      Object {
        "ignoreDestructuring": false,
        "ignoreImports": false,
        "properties": "never",
      },
    ],
    "capitalized-comments": Array [
      "off",
      "never",
      Object {
        "block": Object {
          "ignoreConsecutiveComments": true,
          "ignoreInlineComments": true,
          "ignorePattern": ".*",
        },
        "line": Object {
          "ignoreConsecutiveComments": true,
          "ignoreInlineComments": true,
          "ignorePattern": ".*",
        },
      },
    ],
    "class-methods-use-this": Array [
      "error",
      Object {
        "exceptMethods": Array [
          "render",
          "getInitialState",
          "getDefaultProps",
          "getChildContext",
          "componentWillMount",
          "UNSAFE_componentWillMount",
          "componentDidMount",
          "componentWillReceiveProps",
          "UNSAFE_componentWillReceiveProps",
          "shouldComponentUpdate",
          "componentWillUpdate",
          "UNSAFE_componentWillUpdate",
          "componentDidUpdate",
          "componentWillUnmount",
          "componentDidCatch",
          "getSnapshotBeforeUpdate",
        ],
      },
    ],
    "comma-dangle": Array [
      "error",
      "always-multiline",
    ],
    "comma-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "comma-style": Array [
      "error",
      "last",
      Object {
        "exceptions": Object {
          "ArrayExpression": false,
          "ArrayPattern": false,
          "ArrowFunctionExpression": false,
          "CallExpression": false,
          "FunctionDeclaration": false,
          "FunctionExpression": false,
          "ImportDeclaration": false,
          "NewExpression": false,
          "ObjectExpression": false,
          "ObjectPattern": false,
          "VariableDeclaration": false,
        },
      },
    ],
    "complexity": Array [
      "error",
      15,
    ],
    "computed-property-spacing": Array [
      "error",
      "never",
    ],
    "consistent-return": Array [
      "error",
    ],
    "consistent-this": Array [
      "off",
    ],
    "constructor-super": Array [
      "error",
    ],
    "curly": Array [
      "error",
      "all",
    ],
    "default-case": Array [
      "error",
      Object {
        "commentPattern": "^no default$",
      },
    ],
    "default-case-last": Array [
      "error",
    ],
    "default-param-last": Array [
      "error",
    ],
    "dot-location": Array [
      "error",
      "property",
    ],
    "dot-notation": Array [
      "error",
      Object {
        "allowKeywords": true,
        "allowPattern": "",
      },
    ],
    "eol-last": Array [
      "error",
      "always",
    ],
    "eqeqeq": Array [
      "error",
      "always",
    ],
    "eslint-comments/disable-enable-pair": Array [
      "error",
      Object {
        "allowWholeFile": true,
      },
    ],
    "eslint-comments/no-aggregating-enable": Array [
      "error",
    ],
    "eslint-comments/no-duplicate-disable": Array [
      "error",
    ],
    "eslint-comments/no-restricted-disable": Array [
      "off",
    ],
    "eslint-comments/no-unlimited-disable": Array [
      "error",
    ],
    "eslint-comments/no-unused-disable": Array [
      "error",
    ],
    "eslint-comments/no-unused-enable": Array [
      "error",
    ],
    "eslint-comments/no-use": Array [
      "off",
    ],
    "eslint-comments/require-description": Array [
      "error",
    ],
    "for-direction": Array [
      "error",
    ],
    "formatjs/blocklist-elements": Array [
      "off",
    ],
    "formatjs/enforce-default-message": Array [
      "off",
    ],
    "formatjs/enforce-description": Array [
      "off",
    ],
    "formatjs/enforce-id": Array [
      "off",
    ],
    "formatjs/enforce-placeholders": Array [
      "error",
    ],
    "formatjs/enforce-plural-rules": Array [
      "error",
    ],
    "formatjs/no-camel-case": Array [
      "error",
    ],
    "formatjs/no-complex-selectors": Array [
      "error",
      Object {
        "limit": 3,
      },
    ],
    "formatjs/no-emoji": Array [
      "error",
    ],
    "formatjs/no-id": Array [
      "off",
    ],
    "formatjs/no-multiple-plurals": Array [
      "off",
    ],
    "formatjs/no-multiple-whitespaces": Array [
      "off",
    ],
    "formatjs/no-offset": Array [
      "error",
    ],
    "func-call-spacing": Array [
      "error",
      "never",
    ],
    "func-name-matching": Array [
      "off",
      "always",
      Object {
        "considerPropertyDescriptor": true,
        "includeCommonJSModuleExports": false,
      },
    ],
    "func-names": Array [
      "warn",
    ],
    "func-style": Array [
      "off",
      "expression",
    ],
    "function-call-argument-newline": Array [
      "off",
      "consistent",
    ],
    "function-paren-newline": Array [
      "off",
      "consistent",
    ],
    "generator-star-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "getter-return": Array [
      "error",
      Object {
        "allowImplicit": true,
      },
    ],
    "global-require": Array [
      "off",
    ],
    "grouped-accessor-pairs": Array [
      "off",
    ],
    "guard-for-in": Array [
      "error",
    ],
    "handle-callback-err": Array [
      "off",
    ],
    "id-blacklist": Array [
      "off",
    ],
    "id-denylist": Array [
      "error",
      "any",
      "number",
      "string",
      "boolean",
      "Undefined",
    ],
    "id-length": Array [
      "off",
    ],
    "id-match": Array [
      "error",
    ],
    "implicit-arrow-linebreak": Array [
      "off",
      "beside",
    ],
    "import/default": Array [
      "error",
    ],
    "import/dynamic-import-chunkname": Array [
      "off",
      Object {
        "importFunctions": Array [],
        "webpackChunknameFormat": "[0-9a-zA-Z-_/.]+",
      },
    ],
    "import/export": Array [
      "error",
    ],
    "import/exports-last": Array [
      "off",
    ],
    "import/extensions": Array [
      "error",
      "always",
      Object {
        "ignorePackages": true,
        "pattern": Object {
          "js": "never",
          "ts": "never",
          "tsx": "never",
        },
      },
    ],
    "import/first": Array [
      "error",
    ],
    "import/group-exports": Array [
      "error",
    ],
    "import/imports-first": Array [
      "off",
    ],
    "import/max-dependencies": Array [
      "error",
      Object {
        "max": 15,
      },
    ],
    "import/named": Array [
      "error",
    ],
    "import/namespace": Array [
      "error",
    ],
    "import/newline-after-import": Array [
      "error",
    ],
    "import/no-absolute-path": Array [
      "error",
    ],
    "import/no-amd": Array [
      "error",
    ],
    "import/no-anonymous-default-export": Array [
      "error",
      Object {
        "allowAnonymousClass": false,
        "allowAnonymousFunction": false,
        "allowArray": false,
        "allowArrowFunction": false,
        "allowLiteral": false,
        "allowObject": false,
      },
    ],
    "import/no-commonjs": Array [
      "off",
    ],
    "import/no-cycle": Array [
      "error",
    ],
    "import/no-default-export": Array [
      "error",
    ],
    "import/no-deprecated": Array [
      "off",
    ],
    "import/no-duplicates": Array [
      "warn",
    ],
    "import/no-dynamic-require": Array [
      "error",
    ],
    "import/no-extraneous-dependencies": Array [
      "error",
      Object {
        "devDependencies": Array [
          "**/*.test.js",
          "**/*.test.ts",
          "**/*.test.tsx",
          "**/tests/shared/**/*",
        ],
      },
    ],
    "import/no-import-module-exports": Array [
      "error",
    ],
    "import/no-internal-modules": Array [
      "off",
      Object {
        "allow": Array [],
      },
    ],
    "import/no-mutable-exports": Array [
      "error",
    ],
    "import/no-named-as-default": Array [
      "warn",
    ],
    "import/no-named-as-default-member": Array [
      "warn",
    ],
    "import/no-named-default": Array [
      "error",
    ],
    "import/no-named-export": Array [
      "off",
    ],
    "import/no-namespace": Array [
      "off",
    ],
    "import/no-nodejs-modules": Array [
      "off",
    ],
    "import/no-relative-packages": Array [
      "error",
    ],
    "import/no-relative-parent-imports": Array [
      "off",
    ],
    "import/no-restricted-paths": Array [
      "off",
    ],
    "import/no-self-import": Array [
      "error",
    ],
    "import/no-unassigned-import": Array [
      "off",
    ],
    "import/no-unresolved": Array [
      "error",
      Object {
        "caseSensitive": true,
        "commonjs": true,
      },
    ],
    "import/no-unused-modules": Array [
      "error",
      Object {
        "missingExports": true,
        "unusedExports": true,
      },
    ],
    "import/no-useless-path-segments": Array [
      "error",
      Object {
        "commonjs": true,
      },
    ],
    "import/no-webpack-loader-syntax": Array [
      "error",
    ],
    "import/order": Array [
      "error",
      Object {
        "alphabetize": Object {
          "caseInsensitive": true,
          "order": "asc",
        },
        "groups": Array [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index",
          "unknown",
        ],
        "pathGroups": Array [
          Object {
            "group": "internal",
            "pattern": "#*/**",
          },
        ],
      },
    ],
    "import/prefer-default-export": Array [
      "off",
    ],
    "import/unambiguous": Array [
      "off",
    ],
    "indent": Array [
      "error",
      2,
      Object {
        "ArrayExpression": 1,
        "CallExpression": Object {
          "arguments": 1,
        },
        "FunctionDeclaration": Object {
          "body": 1,
          "parameters": 1,
        },
        "FunctionExpression": Object {
          "body": 1,
          "parameters": 1,
        },
        "ImportDeclaration": 1,
        "ObjectExpression": 1,
        "SwitchCase": 1,
        "VariableDeclarator": 1,
        "flatTernaryExpressions": false,
        "ignoreComments": false,
        "ignoredNodes": Array [
          "JSXElement",
          "JSXElement > *",
          "JSXAttribute",
          "JSXIdentifier",
          "JSXNamespacedName",
          "JSXMemberExpression",
          "JSXSpreadAttribute",
          "JSXExpressionContainer",
          "JSXOpeningElement",
          "JSXClosingElement",
          "JSXFragment",
          "JSXOpeningFragment",
          "JSXClosingFragment",
          "JSXText",
          "JSXEmptyExpression",
          "JSXSpreadChild",
        ],
        "outerIIFEBody": 1,
      },
    ],
    "indent-legacy": Array [
      "off",
    ],
    "init-declarations": Array [
      "off",
    ],
    "jest-dom/prefer-checked": Array [
      "error",
    ],
    "jest-dom/prefer-empty": Array [
      "error",
    ],
    "jest-dom/prefer-enabled-disabled": Array [
      "error",
    ],
    "jest-dom/prefer-focus": Array [
      "error",
    ],
    "jest-dom/prefer-in-document": Array [
      "error",
    ],
    "jest-dom/prefer-required": Array [
      "error",
    ],
    "jest-dom/prefer-to-have-attribute": Array [
      "error",
    ],
    "jest-dom/prefer-to-have-class": Array [
      "error",
    ],
    "jest-dom/prefer-to-have-style": Array [
      "error",
    ],
    "jest-dom/prefer-to-have-text-content": Array [
      "error",
    ],
    "jest-dom/prefer-to-have-value": Array [
      "error",
    ],
    "jsx-a11y/accessible-emoji": Array [
      "error",
    ],
    "jsx-a11y/alt-text": Array [
      "error",
      Object {
        "area": Array [],
        "elements": Array [
          "img",
          "object",
          "area",
          "input[type=\\"image\\"]",
        ],
        "img": Array [],
        "input[type=\\"image\\"]": Array [],
        "object": Array [],
      },
    ],
    "jsx-a11y/anchor-has-content": Array [
      "error",
      Object {
        "components": Array [],
      },
    ],
    "jsx-a11y/anchor-is-valid": Array [
      "error",
      Object {
        "aspects": Array [
          "noHref",
          "invalidHref",
          "preferButton",
        ],
        "components": Array [
          "Link",
        ],
        "specialLink": Array [
          "to",
        ],
      },
    ],
    "jsx-a11y/aria-activedescendant-has-tabindex": Array [
      "error",
    ],
    "jsx-a11y/aria-props": Array [
      "error",
    ],
    "jsx-a11y/aria-proptypes": Array [
      "error",
    ],
    "jsx-a11y/aria-role": Array [
      "error",
      Object {
        "ignoreNonDOM": false,
        "ignoreNonDom": false,
      },
    ],
    "jsx-a11y/aria-unsupported-elements": Array [
      "error",
    ],
    "jsx-a11y/autocomplete-valid": Array [
      "error",
    ],
    "jsx-a11y/click-events-have-key-events": Array [
      "error",
    ],
    "jsx-a11y/control-has-associated-label": Array [
      "off",
      Object {
        "ignoreElements": Array [
          "audio",
          "canvas",
          "embed",
          "input",
          "textarea",
          "tr",
          "video",
        ],
        "ignoreRoles": Array [
          "grid",
          "listbox",
          "menu",
          "menubar",
          "radiogroup",
          "row",
          "tablist",
          "toolbar",
          "tree",
          "treegrid",
        ],
        "includeRoles": Array [
          "alert",
          "dialog",
        ],
      },
    ],
    "jsx-a11y/heading-has-content": Array [
      "error",
      Object {
        "components": Array [
          "",
        ],
      },
    ],
    "jsx-a11y/html-has-lang": Array [
      "error",
    ],
    "jsx-a11y/iframe-has-title": Array [
      "error",
    ],
    "jsx-a11y/img-redundant-alt": Array [
      "error",
    ],
    "jsx-a11y/interactive-supports-focus": Array [
      "error",
      Object {
        "tabbable": Array [
          "button",
          "checkbox",
          "link",
          "searchbox",
          "spinbutton",
          "switch",
          "textbox",
        ],
      },
    ],
    "jsx-a11y/label-has-associated-control": Array [
      "error",
      Object {
        "assert": "both",
        "controlComponents": Array [],
        "depth": 25,
        "labelAttributes": Array [],
        "labelComponents": Array [],
      },
    ],
    "jsx-a11y/label-has-for": Array [
      "off",
      Object {
        "allowChildren": false,
        "components": Array [],
        "required": Object {
          "every": Array [
            "nesting",
            "id",
          ],
        },
      },
    ],
    "jsx-a11y/lang": Array [
      "error",
    ],
    "jsx-a11y/media-has-caption": Array [
      "error",
      Object {
        "audio": Array [],
        "track": Array [],
        "video": Array [],
      },
    ],
    "jsx-a11y/mouse-events-have-key-events": Array [
      "error",
    ],
    "jsx-a11y/no-access-key": Array [
      "error",
    ],
    "jsx-a11y/no-autofocus": Array [
      "error",
      Object {
        "ignoreNonDOM": true,
      },
    ],
    "jsx-a11y/no-distracting-elements": Array [
      "error",
      Object {
        "elements": Array [
          "marquee",
          "blink",
        ],
      },
    ],
    "jsx-a11y/no-interactive-element-to-noninteractive-role": Array [
      "error",
      Object {
        "tr": Array [
          "none",
          "presentation",
        ],
      },
    ],
    "jsx-a11y/no-noninteractive-element-interactions": Array [
      "error",
      Object {
        "alert": Array [
          "onKeyUp",
          "onKeyDown",
          "onKeyPress",
        ],
        "body": Array [
          "onError",
          "onLoad",
        ],
        "dialog": Array [
          "onKeyUp",
          "onKeyDown",
          "onKeyPress",
        ],
        "handlers": Array [
          "onClick",
          "onError",
          "onLoad",
          "onMouseDown",
          "onMouseUp",
          "onKeyPress",
          "onKeyDown",
          "onKeyUp",
        ],
        "iframe": Array [
          "onError",
          "onLoad",
        ],
        "img": Array [
          "onError",
          "onLoad",
        ],
      },
    ],
    "jsx-a11y/no-noninteractive-element-to-interactive-role": Array [
      "error",
      Object {
        "li": Array [
          "menuitem",
          "option",
          "row",
          "tab",
          "treeitem",
        ],
        "ol": Array [
          "listbox",
          "menu",
          "menubar",
          "radiogroup",
          "tablist",
          "tree",
          "treegrid",
        ],
        "table": Array [
          "grid",
        ],
        "td": Array [
          "gridcell",
        ],
        "ul": Array [
          "listbox",
          "menu",
          "menubar",
          "radiogroup",
          "tablist",
          "tree",
          "treegrid",
        ],
      },
    ],
    "jsx-a11y/no-noninteractive-tabindex": Array [
      "error",
      Object {
        "allowExpressionValues": true,
        "roles": Array [
          "tabpanel",
        ],
        "tags": Array [],
      },
    ],
    "jsx-a11y/no-onchange": Array [
      "error",
    ],
    "jsx-a11y/no-redundant-roles": Array [
      "error",
    ],
    "jsx-a11y/no-static-element-interactions": Array [
      "error",
      Object {
        "allowExpressionValues": true,
        "handlers": Array [
          "onClick",
          "onMouseDown",
          "onMouseUp",
          "onKeyPress",
          "onKeyDown",
          "onKeyUp",
        ],
      },
    ],
    "jsx-a11y/role-has-required-aria-props": Array [
      "error",
    ],
    "jsx-a11y/role-supports-aria-props": Array [
      "error",
    ],
    "jsx-a11y/scope": Array [
      "error",
    ],
    "jsx-a11y/tabindex-no-positive": Array [
      "error",
    ],
    "jsx-quotes": Array [
      "error",
      "prefer-double",
    ],
    "key-spacing": Array [
      "error",
      Object {
        "afterColon": true,
        "beforeColon": false,
      },
    ],
    "keyword-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": true,
        "overrides": Object {
          "case": Object {
            "after": true,
          },
          "return": Object {
            "after": true,
          },
          "throw": Object {
            "after": true,
          },
        },
      },
    ],
    "line-comment-position": Array [
      "off",
      Object {
        "applyDefaultPatterns": true,
        "ignorePattern": "",
        "position": "above",
      },
    ],
    "linebreak-style": Array [
      "error",
      "unix",
    ],
    "lines-around-comment": Array [
      "off",
    ],
    "lines-around-directive": Array [
      "off",
    ],
    "lines-between-class-members": Array [
      "error",
      "always",
      Object {
        "exceptAfterSingleLine": false,
      },
    ],
    "max-classes-per-file": Array [
      "error",
      1,
    ],
    "max-depth": Array [
      "off",
      4,
    ],
    "max-len": Array [
      "error",
      Object {
        "code": 120,
        "ignoreStrings": true,
      },
    ],
    "max-lines": Array [
      "off",
      Object {
        "max": 300,
        "skipBlankLines": true,
        "skipComments": true,
      },
    ],
    "max-lines-per-function": Array [
      "off",
      Object {
        "IIFEs": true,
        "max": 50,
        "skipBlankLines": true,
        "skipComments": true,
      },
    ],
    "max-nested-callbacks": Array [
      "off",
    ],
    "max-params": Array [
      "off",
      3,
    ],
    "max-statements": Array [
      "off",
      10,
    ],
    "max-statements-per-line": Array [
      "off",
      Object {
        "max": 1,
      },
    ],
    "multiline-comment-style": Array [
      "off",
      "starred-block",
    ],
    "multiline-ternary": Array [
      "off",
      "never",
    ],
    "new-cap": Array [
      "error",
      Object {
        "capIsNew": false,
        "capIsNewExceptions": Array [
          "Immutable.Map",
          "Immutable.Set",
          "Immutable.List",
        ],
        "newIsCap": true,
        "newIsCapExceptions": Array [],
        "properties": true,
      },
    ],
    "new-parens": Array [
      "error",
    ],
    "newline-after-var": Array [
      "off",
    ],
    "newline-before-return": Array [
      "off",
    ],
    "newline-per-chained-call": Array [
      "error",
      Object {
        "ignoreChainWithDepth": 4,
      },
    ],
    "no-alert": Array [
      "warn",
    ],
    "no-array-constructor": Array [
      "error",
    ],
    "no-async-promise-executor": Array [
      "error",
    ],
    "no-await-in-loop": Array [
      "error",
    ],
    "no-bitwise": Array [
      "error",
    ],
    "no-buffer-constructor": Array [
      "off",
    ],
    "no-caller": Array [
      "error",
    ],
    "no-case-declarations": Array [
      "error",
    ],
    "no-catch-shadow": Array [
      "off",
    ],
    "no-class-assign": Array [
      "error",
    ],
    "no-compare-neg-zero": Array [
      "error",
    ],
    "no-cond-assign": Array [
      "error",
      "always",
    ],
    "no-confusing-arrow": Array [
      "error",
      Object {
        "allowParens": true,
      },
    ],
    "no-console": Array [
      "error",
    ],
    "no-const-assign": Array [
      "error",
    ],
    "no-constant-condition": Array [
      "error",
    ],
    "no-constructor-return": Array [
      "off",
    ],
    "no-continue": Array [
      "error",
    ],
    "no-control-regex": Array [
      "error",
    ],
    "no-debugger": Array [
      "error",
    ],
    "no-delete-var": Array [
      "error",
    ],
    "no-div-regex": Array [
      "off",
    ],
    "no-dupe-args": Array [
      "error",
    ],
    "no-dupe-class-members": Array [
      "error",
    ],
    "no-dupe-else-if": Array [
      "error",
    ],
    "no-dupe-keys": Array [
      "error",
    ],
    "no-duplicate-case": Array [
      "error",
    ],
    "no-duplicate-imports": Array [
      "error",
      Object {
        "includeExports": true,
      },
    ],
    "no-else-return": Array [
      "error",
      Object {
        "allowElseIf": false,
      },
    ],
    "no-empty": Array [
      "error",
    ],
    "no-empty-character-class": Array [
      "error",
    ],
    "no-empty-function": Array [
      "error",
      Object {
        "allow": Array [
          "arrowFunctions",
          "functions",
          "methods",
        ],
      },
    ],
    "no-empty-pattern": Array [
      "error",
    ],
    "no-eq-null": Array [
      "off",
    ],
    "no-eval": Array [
      "error",
    ],
    "no-ex-assign": Array [
      "error",
    ],
    "no-extend-native": Array [
      "error",
    ],
    "no-extra-bind": Array [
      "error",
    ],
    "no-extra-boolean-cast": Array [
      "error",
    ],
    "no-extra-label": Array [
      "error",
    ],
    "no-extra-parens": Array [
      "off",
      "all",
      Object {
        "conditionalAssign": true,
        "enforceForArrowConditionals": false,
        "ignoreJSX": "all",
        "nestedBinaryExpressions": false,
        "returnAssign": false,
      },
    ],
    "no-extra-semi": Array [
      "error",
    ],
    "no-fallthrough": Array [
      "off",
    ],
    "no-floating-decimal": Array [
      "error",
    ],
    "no-func-assign": Array [
      "error",
    ],
    "no-global-assign": Array [
      "error",
      Object {
        "exceptions": Array [],
      },
    ],
    "no-implicit-coercion": Array [
      "off",
      Object {
        "allow": Array [],
        "boolean": false,
        "number": true,
        "string": true,
      },
    ],
    "no-implicit-globals": Array [
      "off",
    ],
    "no-implied-eval": Array [
      "error",
    ],
    "no-import-assign": Array [
      "error",
    ],
    "no-inline-comments": Array [
      "off",
    ],
    "no-inner-declarations": Array [
      "error",
    ],
    "no-invalid-regexp": Array [
      "error",
    ],
    "no-invalid-this": Array [
      "off",
    ],
    "no-irregular-whitespace": Array [
      "error",
    ],
    "no-iterator": Array [
      "error",
    ],
    "no-label-var": Array [
      "error",
    ],
    "no-labels": Array [
      "error",
      Object {
        "allowLoop": false,
        "allowSwitch": false,
      },
    ],
    "no-lone-blocks": Array [
      "error",
    ],
    "no-lonely-if": Array [
      "error",
    ],
    "no-loop-func": Array [
      "error",
    ],
    "no-loss-of-precision": Array [
      "error",
    ],
    "no-magic-numbers": Array [
      "off",
      Object {
        "detectObjects": false,
        "enforceConst": true,
        "ignore": Array [],
        "ignoreArrayIndexes": true,
      },
    ],
    "no-misleading-character-class": Array [
      "error",
    ],
    "no-mixed-operators": Array [
      "error",
      Object {
        "allowSamePrecedence": false,
        "groups": Array [
          Array [
            "%",
            "**",
          ],
          Array [
            "%",
            "+",
          ],
          Array [
            "%",
            "-",
          ],
          Array [
            "%",
            "*",
          ],
          Array [
            "%",
            "/",
          ],
          Array [
            "/",
            "*",
          ],
          Array [
            "&",
            "|",
            "<<",
            ">>",
            ">>>",
          ],
          Array [
            "==",
            "!=",
            "===",
            "!==",
          ],
          Array [
            "&&",
            "||",
          ],
        ],
      },
    ],
    "no-mixed-requires": Array [
      "off",
    ],
    "no-mixed-spaces-and-tabs": Array [
      "error",
    ],
    "no-multi-assign": Array [
      "error",
    ],
    "no-multi-spaces": Array [
      "error",
      Object {
        "ignoreEOLComments": false,
      },
    ],
    "no-multi-str": Array [
      "error",
    ],
    "no-multiple-empty-lines": Array [
      "error",
      Object {
        "max": 2,
        "maxBOF": 1,
        "maxEOF": 0,
      },
    ],
    "no-native-reassign": Array [
      "off",
    ],
    "no-negated-condition": Array [
      "off",
    ],
    "no-negated-in-lhs": Array [
      "off",
    ],
    "no-nested-ternary": Array [
      "off",
    ],
    "no-new": Array [
      "error",
    ],
    "no-new-func": Array [
      "error",
    ],
    "no-new-object": Array [
      "error",
    ],
    "no-new-require": Array [
      "off",
    ],
    "no-new-symbol": Array [
      "error",
    ],
    "no-new-wrappers": Array [
      "error",
    ],
    "no-nonoctal-decimal-escape": Array [
      "error",
    ],
    "no-obj-calls": Array [
      "error",
    ],
    "no-octal": Array [
      "error",
    ],
    "no-octal-escape": Array [
      "error",
    ],
    "no-param-reassign": Array [
      "error",
      Object {
        "ignorePropertyModificationsFor": Array [
          "acc",
          "accumulator",
          "e",
          "ctx",
          "req",
          "request",
          "res",
          "response",
          "$scope",
          "staticContext",
        ],
        "props": true,
      },
    ],
    "no-path-concat": Array [
      "off",
    ],
    "no-plusplus": Array [
      "error",
    ],
    "no-process-env": Array [
      "off",
    ],
    "no-process-exit": Array [
      "off",
    ],
    "no-promise-executor-return": Array [
      "error",
    ],
    "no-proto": Array [
      "error",
    ],
    "no-prototype-builtins": Array [
      "error",
    ],
    "no-redeclare": Array [
      "error",
    ],
    "no-regex-spaces": Array [
      "error",
    ],
    "no-restricted-exports": Array [
      "off",
    ],
    "no-restricted-globals": Array [
      "error",
      "isFinite",
      "isNaN",
      "addEventListener",
      "blur",
      "close",
      "closed",
      "confirm",
      "defaultStatus",
      "defaultstatus",
      "event",
      "external",
      "find",
      "focus",
      "frameElement",
      "frames",
      "history",
      "innerHeight",
      "innerWidth",
      "length",
      "location",
      "locationbar",
      "menubar",
      "moveBy",
      "moveTo",
      "name",
      "onblur",
      "onerror",
      "onfocus",
      "onload",
      "onresize",
      "onunload",
      "open",
      "opener",
      "opera",
      "outerHeight",
      "outerWidth",
      "pageXOffset",
      "pageYOffset",
      "parent",
      "print",
      "removeEventListener",
      "resizeBy",
      "resizeTo",
      "screen",
      "screenLeft",
      "screenTop",
      "screenX",
      "screenY",
      "scroll",
      "scrollbars",
      "scrollBy",
      "scrollTo",
      "scrollX",
      "scrollY",
      "self",
      "status",
      "statusbar",
      "stop",
      "toolbar",
      "top",
    ],
    "no-restricted-imports": Array [
      "off",
      Object {
        "paths": Array [],
        "patterns": Array [],
      },
    ],
    "no-restricted-modules": Array [
      "off",
    ],
    "no-restricted-properties": Array [
      "error",
      Object {
        "message": "arguments.callee is deprecated",
        "object": "arguments",
        "property": "callee",
      },
      Object {
        "message": "Please use Number.isFinite instead",
        "object": "global",
        "property": "isFinite",
      },
      Object {
        "message": "Please use Number.isFinite instead",
        "object": "self",
        "property": "isFinite",
      },
      Object {
        "message": "Please use Number.isFinite instead",
        "object": "window",
        "property": "isFinite",
      },
      Object {
        "message": "Please use Number.isNaN instead",
        "object": "global",
        "property": "isNaN",
      },
      Object {
        "message": "Please use Number.isNaN instead",
        "object": "self",
        "property": "isNaN",
      },
      Object {
        "message": "Please use Number.isNaN instead",
        "object": "window",
        "property": "isNaN",
      },
      Object {
        "message": "Please use Object.defineProperty instead.",
        "property": "__defineGetter__",
      },
      Object {
        "message": "Please use Object.defineProperty instead.",
        "property": "__defineSetter__",
      },
      Object {
        "message": "Use the exponentiation operator (**) instead.",
        "object": "Math",
        "property": "pow",
      },
    ],
    "no-restricted-syntax": Array [
      "error",
      Object {
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.",
        "selector": "ForInStatement",
      },
      Object {
        "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.",
        "selector": "ForOfStatement",
      },
      Object {
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.",
        "selector": "LabeledStatement",
      },
      Object {
        "message": "\`with\` is disallowed in strict mode because it makes code impossible to predict and optimize.",
        "selector": "WithStatement",
      },
      Object {
        "message": "Please use the following notation: 'foo in bar;' => 'foo instanceof bar;'",
        "selector": "BinaryExpression[operator='in']",
      },
    ],
    "no-return-assign": Array [
      "error",
      "always",
    ],
    "no-return-await": Array [
      "error",
    ],
    "no-script-url": Array [
      "error",
    ],
    "no-self-assign": Array [
      "error",
      Object {
        "props": true,
      },
    ],
    "no-self-compare": Array [
      "error",
    ],
    "no-sequences": Array [
      "error",
    ],
    "no-setter-return": Array [
      "error",
    ],
    "no-shadow": Array [
      "error",
    ],
    "no-shadow-restricted-names": Array [
      "error",
    ],
    "no-spaced-func": Array [
      "off",
    ],
    "no-sparse-arrays": Array [
      "error",
    ],
    "no-sync": Array [
      "off",
    ],
    "no-tabs": Array [
      "error",
    ],
    "no-template-curly-in-string": Array [
      "error",
    ],
    "no-ternary": Array [
      "off",
    ],
    "no-this-before-super": Array [
      "error",
    ],
    "no-throw-literal": Array [
      "error",
    ],
    "no-trailing-spaces": Array [
      "error",
      Object {
        "ignoreComments": false,
        "skipBlankLines": false,
      },
    ],
    "no-undef": Array [
      "error",
    ],
    "no-undef-init": Array [
      "error",
    ],
    "no-undefined": Array [
      "off",
    ],
    "no-underscore-dangle": Array [
      "error",
      Object {
        "allow": Array [
          "__REDUX_DEVTOOLS_EXTENSION_COMPOSE__",
        ],
        "allowAfterSuper": false,
        "allowAfterThis": false,
        "allowAfterThisConstructor": false,
        "enforceInMethodNames": true,
      },
    ],
    "no-unexpected-multiline": Array [
      "error",
    ],
    "no-unmodified-loop-condition": Array [
      "off",
    ],
    "no-unneeded-ternary": Array [
      "error",
      Object {
        "defaultAssignment": false,
      },
    ],
    "no-unreachable": Array [
      "error",
    ],
    "no-unreachable-loop": Array [
      "error",
    ],
    "no-unsafe-finally": Array [
      "error",
    ],
    "no-unsafe-negation": Array [
      "error",
    ],
    "no-unsafe-optional-chaining": Array [
      "error",
    ],
    "no-unused-expressions": Array [
      "error",
      Object {
        "allowShortCircuit": false,
        "allowTaggedTemplates": false,
        "allowTernary": false,
      },
    ],
    "no-unused-labels": Array [
      "error",
    ],
    "no-unused-private-class-members": Array [
      "error",
    ],
    "no-unused-vars": Array [
      "error",
      Object {
        "args": "after-used",
        "ignoreRestSiblings": true,
        "vars": "all",
      },
    ],
    "no-use-before-define": Array [
      "error",
      Object {
        "classes": true,
        "functions": true,
        "variables": true,
      },
    ],
    "no-useless-backreference": Array [
      "off",
    ],
    "no-useless-call": Array [
      "off",
    ],
    "no-useless-catch": Array [
      "error",
    ],
    "no-useless-computed-key": Array [
      "error",
    ],
    "no-useless-concat": Array [
      "error",
    ],
    "no-useless-constructor": Array [
      "error",
    ],
    "no-useless-escape": Array [
      "error",
    ],
    "no-useless-rename": Array [
      "error",
      Object {
        "ignoreDestructuring": false,
        "ignoreExport": false,
        "ignoreImport": false,
      },
    ],
    "no-useless-return": Array [
      "error",
    ],
    "no-var": Array [
      "error",
    ],
    "no-void": Array [
      "error",
    ],
    "no-warning-comments": Array [
      "warn",
      Object {
        "location": "anywhere",
        "terms": Array [
          "todo",
          "fixme",
        ],
      },
    ],
    "no-whitespace-before-property": Array [
      "error",
    ],
    "no-with": Array [
      "error",
    ],
    "node/callback-return": Array [
      "off",
    ],
    "node/exports-style": Array [
      "error",
      "exports",
    ],
    "node/file-extension-in-import": Array [
      "error",
      "always",
      Object {
        ".js": "never",
        ".ts": "never",
        ".tsx": "never",
      },
    ],
    "node/global-require": Array [
      "error",
    ],
    "node/handle-callback-err": Array [
      "off",
    ],
    "node/no-callback-literal": Array [
      "off",
    ],
    "node/no-deprecated-api": Array [
      "error",
    ],
    "node/no-exports-assign": Array [
      "error",
    ],
    "node/no-extraneous-import": Array [
      "error",
    ],
    "node/no-extraneous-require": Array [
      "error",
    ],
    "node/no-hide-core-modules": Array [
      "off",
    ],
    "node/no-missing-import": Array [
      "error",
      Object {
        "tryExtensions": Array [
          ".js",
          ".jsx",
          ".json",
        ],
      },
    ],
    "node/no-missing-require": Array [
      "error",
    ],
    "node/no-mixed-requires": Array [
      "off",
    ],
    "node/no-new-require": Array [
      "error",
    ],
    "node/no-path-concat": Array [
      "error",
    ],
    "node/no-process-env": Array [
      "off",
    ],
    "node/no-process-exit": Array [
      "error",
    ],
    "node/no-restricted-import": Array [
      "off",
    ],
    "node/no-restricted-require": Array [
      "off",
    ],
    "node/no-sync": Array [
      "error",
    ],
    "node/no-unpublished-bin": Array [
      "error",
    ],
    "node/no-unpublished-import": Array [
      "error",
    ],
    "node/no-unpublished-require": Array [
      "error",
    ],
    "node/no-unsupported-features": Array [
      "off",
    ],
    "node/no-unsupported-features/es-builtins": Array [
      "error",
    ],
    "node/no-unsupported-features/es-syntax": Array [
      "error",
      Object {
        "ignores": Array [
          "modules",
        ],
      },
    ],
    "node/no-unsupported-features/node-builtins": Array [
      "error",
    ],
    "node/prefer-global/buffer": Array [
      "error",
      "always",
    ],
    "node/prefer-global/console": Array [
      "error",
    ],
    "node/prefer-global/process": Array [
      "error",
    ],
    "node/prefer-global/text-decoder": Array [
      "error",
      "never",
    ],
    "node/prefer-global/text-encoder": Array [
      "error",
      "never",
    ],
    "node/prefer-global/url": Array [
      "error",
      "never",
    ],
    "node/prefer-global/url-search-params": Array [
      "error",
      "never",
    ],
    "node/prefer-promises/dns": Array [
      "error",
    ],
    "node/prefer-promises/fs": Array [
      "error",
    ],
    "node/process-exit-as-throw": Array [
      "error",
    ],
    "node/shebang": Array [
      "error",
      Object {
        "convertPath": Array [
          Object {
            "exclude": Array [
              "**/*.test.ts",
            ],
            "include": Array [
              "src/**/*.ts",
            ],
            "replace": Array [
              "^src/(.+)\\\\.ts$",
              "build/$1.js",
            ],
          },
          Object {
            "exclude": Array [
              "**/*.test.tsx",
            ],
            "include": Array [
              "src/**/*.tsx",
            ],
            "replace": Array [
              "^src/(.+)\\\\.tsx$",
              "build/$1.js",
            ],
          },
        ],
      },
    ],
    "nonblock-statement-body-position": Array [
      "error",
      "beside",
      Object {
        "overrides": Object {},
      },
    ],
    "object-curly-newline": Array [
      "error",
      Object {
        "consistent": true,
        "multiline": true,
      },
    ],
    "object-curly-spacing": Array [
      "error",
      "always",
    ],
    "object-property-newline": Array [
      "error",
      Object {
        "allowAllPropertiesOnSameLine": true,
        "allowMultiplePropertiesPerLine": false,
      },
    ],
    "object-shorthand": Array [
      "error",
      "always",
      Object {
        "avoidQuotes": true,
        "ignoreConstructors": false,
      },
    ],
    "one-var": Array [
      "error",
      "never",
    ],
    "one-var-declaration-per-line": Array [
      "error",
      "always",
    ],
    "operator-assignment": Array [
      "error",
      "always",
    ],
    "operator-linebreak": Array [
      "error",
      "after",
      Object {
        "overrides": Object {
          ":": "before",
          "?": "before",
          "|": "before",
        },
      },
    ],
    "padded-blocks": Array [
      "error",
      Object {
        "blocks": "never",
        "classes": "never",
        "switches": "never",
      },
      Object {
        "allowSingleLineBlocks": true,
      },
    ],
    "padding-line-between-statements": Array [
      "error",
      Object {
        "blankLine": "always",
        "next": Array [
          "return",
          "case",
          "const",
          "let",
          "block",
          "block-like",
          "function",
          "multiline-block-like",
          "multiline-expression",
        ],
        "prev": "*",
      },
      Object {
        "blankLine": "always",
        "next": "*",
        "prev": Array [
          "const",
          "let",
          "block",
          "block-like",
          "function",
          "multiline-block-like",
          "multiline-expression",
        ],
      },
      Object {
        "blankLine": "never",
        "next": "import",
        "prev": "import",
      },
      Object {
        "blankLine": "any",
        "next": Array [
          "const",
          "let",
          "var",
        ],
        "prev": Array [
          "const",
          "let",
          "var",
        ],
      },
    ],
    "prefer-arrow-callback": Array [
      "error",
      Object {
        "allowNamedFunctions": false,
        "allowUnboundThis": true,
      },
    ],
    "prefer-const": Array [
      "error",
      Object {
        "destructuring": "any",
        "ignoreReadBeforeAssign": true,
      },
    ],
    "prefer-destructuring": Array [
      "error",
      Object {
        "AssignmentExpression": Object {
          "array": true,
          "object": false,
        },
        "VariableDeclarator": Object {
          "array": false,
          "object": true,
        },
      },
      Object {
        "enforceForRenamedProperties": false,
      },
    ],
    "prefer-exponentiation-operator": Array [
      "off",
    ],
    "prefer-named-capture-group": Array [
      "off",
    ],
    "prefer-numeric-literals": Array [
      "error",
    ],
    "prefer-object-has-own": Array [
      "error",
    ],
    "prefer-object-spread": Array [
      "error",
    ],
    "prefer-promise-reject-errors": Array [
      "error",
      Object {
        "allowEmptyReject": true,
      },
    ],
    "prefer-reflect": Array [
      "off",
    ],
    "prefer-regex-literals": Array [
      "error",
    ],
    "prefer-rest-params": Array [
      "error",
    ],
    "prefer-spread": Array [
      "error",
    ],
    "prefer-template": Array [
      "error",
    ],
    "quote-props": Array [
      "error",
      "as-needed",
    ],
    "quotes": Array [
      "error",
      "single",
      Object {
        "avoidEscape": true,
      },
    ],
    "radix": Array [
      "error",
    ],
    "react-hooks/exhaustive-deps": Array [
      "warn",
    ],
    "react-hooks/rules-of-hooks": Array [
      "error",
    ],
    "react/boolean-prop-naming": Array [
      "off",
      Object {
        "message": "",
        "propTypeNames": Array [
          "bool",
          "mutuallyExclusiveTrueProps",
        ],
        "rule": "^(is|has)[A-Z]([A-Za-z0-9]?)+",
      },
    ],
    "react/button-has-type": Array [
      "error",
      Object {
        "button": true,
        "reset": false,
        "submit": true,
      },
    ],
    "react/default-props-match-prop-types": Array [
      "error",
      Object {
        "allowRequiredDefaults": false,
      },
    ],
    "react/destructuring-assignment": Array [
      "error",
      "always",
    ],
    "react/display-name": Array [
      "error",
      Object {
        "ignoreTranspilerName": false,
      },
    ],
    "react/forbid-component-props": Array [
      "off",
      Object {
        "forbid": Array [],
      },
    ],
    "react/forbid-dom-props": Array [
      "off",
      Object {
        "forbid": Array [],
      },
    ],
    "react/forbid-elements": Array [
      "off",
      Object {
        "forbid": Array [],
      },
    ],
    "react/forbid-foreign-prop-types": Array [
      "warn",
      Object {
        "allowInPropTypes": true,
      },
    ],
    "react/forbid-prop-types": Array [
      "error",
      Object {
        "checkChildContextTypes": true,
        "checkContextTypes": true,
        "forbid": Array [
          "any",
          "array",
          "object",
        ],
      },
    ],
    "react/function-component-definition": Array [
      "off",
      Object {
        "namedComponents": "function-expression",
        "unnamedComponents": "function-expression",
      },
    ],
    "react/hook-use-state": Array [
      "off",
    ],
    "react/iframe-missing-sandbox": Array [
      "error",
    ],
    "react/jsx-boolean-value": Array [
      "error",
      "never",
    ],
    "react/jsx-child-element-spacing": Array [
      "off",
    ],
    "react/jsx-closing-bracket-location": Array [
      "error",
      "line-aligned",
    ],
    "react/jsx-closing-tag-location": Array [
      "error",
    ],
    "react/jsx-curly-brace-presence": Array [
      "error",
      Object {
        "children": "never",
        "props": "never",
      },
    ],
    "react/jsx-curly-newline": Array [
      "error",
      Object {
        "multiline": "consistent",
        "singleline": "consistent",
      },
    ],
    "react/jsx-curly-spacing": Array [
      "error",
      "never",
      Object {
        "allowMultiline": true,
      },
    ],
    "react/jsx-equals-spacing": Array [
      "error",
      "never",
    ],
    "react/jsx-filename-extension": Array [
      "error",
      Object {
        "extensions": Array [
          ".tsx",
        ],
      },
    ],
    "react/jsx-first-prop-new-line": Array [
      "error",
      "multiline-multiprop",
    ],
    "react/jsx-fragments": Array [
      "error",
      "syntax",
    ],
    "react/jsx-handler-names": Array [
      "off",
      Object {
        "eventHandlerPrefix": "handle",
        "eventHandlerPropPrefix": "on",
      },
    ],
    "react/jsx-indent": Array [
      "error",
      2,
    ],
    "react/jsx-indent-props": Array [
      "error",
      2,
    ],
    "react/jsx-key": Array [
      "error",
    ],
    "react/jsx-max-depth": Array [
      "off",
    ],
    "react/jsx-max-props-per-line": Array [
      "error",
      Object {
        "maximum": 1,
        "when": "multiline",
      },
    ],
    "react/jsx-newline": Array [
      "error",
      Object {
        "prevent": false,
      },
    ],
    "react/jsx-no-bind": Array [
      "error",
      Object {
        "allowArrowFunctions": true,
        "allowBind": false,
        "allowFunctions": false,
        "ignoreDOMComponents": true,
        "ignoreRefs": true,
      },
    ],
    "react/jsx-no-comment-textnodes": Array [
      "error",
    ],
    "react/jsx-no-constructed-context-values": Array [
      "error",
    ],
    "react/jsx-no-duplicate-props": Array [
      "error",
      Object {
        "ignoreCase": true,
      },
    ],
    "react/jsx-no-literals": Array [
      "off",
      Object {
        "noStrings": true,
      },
    ],
    "react/jsx-no-script-url": Array [
      "off",
      Array [
        Object {
          "name": "Link",
          "props": Array [
            "to",
          ],
        },
      ],
    ],
    "react/jsx-no-target-blank": Array [
      "error",
      Object {
        "enforceDynamicLinks": "always",
      },
    ],
    "react/jsx-no-undef": Array [
      "error",
    ],
    "react/jsx-no-useless-fragment": Array [
      "off",
    ],
    "react/jsx-one-expression-per-line": Array [
      "error",
      Object {
        "allow": "single-child",
      },
    ],
    "react/jsx-pascal-case": Array [
      "error",
      Object {
        "allowAllCaps": true,
        "ignore": Array [],
      },
    ],
    "react/jsx-props-no-multi-spaces": Array [
      "error",
    ],
    "react/jsx-props-no-spreading": Array [
      "off",
      Object {
        "custom": "enforce",
        "exceptions": Array [],
        "html": "enforce",
      },
    ],
    "react/jsx-sort-default-props": Array [
      "off",
      Object {
        "ignoreCase": true,
      },
    ],
    "react/jsx-sort-props": Array [
      "off",
      Object {
        "callbacksLast": false,
        "ignoreCase": true,
        "noSortAlphabetically": false,
        "reservedFirst": true,
        "shorthandFirst": false,
        "shorthandLast": false,
      },
    ],
    "react/jsx-space-before-closing": Array [
      "off",
      "always",
    ],
    "react/jsx-tag-spacing": Array [
      "error",
      Object {
        "afterOpening": "never",
        "beforeClosing": "never",
        "beforeSelfClosing": "always",
        "closingSlash": "never",
      },
    ],
    "react/jsx-uses-react": Array [
      "error",
    ],
    "react/jsx-uses-vars": Array [
      "error",
    ],
    "react/jsx-wrap-multilines": Array [
      "error",
      Object {
        "arrow": "parens-new-line",
        "assignment": "parens-new-line",
        "condition": "parens-new-line",
        "declaration": "parens-new-line",
        "logical": "parens-new-line",
        "prop": "parens-new-line",
        "return": "parens-new-line",
      },
    ],
    "react/no-access-state-in-setstate": Array [
      "error",
    ],
    "react/no-adjacent-inline-elements": Array [
      "off",
    ],
    "react/no-array-index-key": Array [
      "error",
    ],
    "react/no-arrow-function-lifecycle": Array [
      "off",
    ],
    "react/no-children-prop": Array [
      "error",
    ],
    "react/no-danger": Array [
      "warn",
    ],
    "react/no-danger-with-children": Array [
      "error",
    ],
    "react/no-deprecated": Array [
      "error",
    ],
    "react/no-did-mount-set-state": Array [
      "off",
    ],
    "react/no-did-update-set-state": Array [
      "error",
    ],
    "react/no-direct-mutation-state": Array [
      "error",
    ],
    "react/no-find-dom-node": Array [
      "error",
    ],
    "react/no-invalid-html-attribute": Array [
      "error",
    ],
    "react/no-is-mounted": Array [
      "error",
    ],
    "react/no-multi-comp": Array [
      "off",
    ],
    "react/no-namespace": Array [
      "error",
    ],
    "react/no-redundant-should-component-update": Array [
      "error",
    ],
    "react/no-render-return-value": Array [
      "error",
    ],
    "react/no-set-state": Array [
      "off",
    ],
    "react/no-string-refs": Array [
      "error",
    ],
    "react/no-this-in-sfc": Array [
      "error",
    ],
    "react/no-typos": Array [
      "error",
    ],
    "react/no-unescaped-entities": Array [
      "error",
    ],
    "react/no-unknown-property": Array [
      "error",
    ],
    "react/no-unsafe": Array [
      "error",
      Object {
        "checkAliases": true,
      },
    ],
    "react/no-unstable-nested-components": Array [
      "error",
      Object {
        "allowAsProps": false,
      },
    ],
    "react/no-unused-class-component-methods": Array [
      "error",
    ],
    "react/no-unused-prop-types": Array [
      "error",
      Object {
        "customValidators": Array [],
        "skipShapeProps": true,
      },
    ],
    "react/no-unused-state": Array [
      "error",
    ],
    "react/no-will-update-set-state": Array [
      "error",
    ],
    "react/prefer-es6-class": Array [
      "error",
      "always",
    ],
    "react/prefer-exact-props": Array [
      "error",
    ],
    "react/prefer-read-only-props": Array [
      "off",
    ],
    "react/prefer-stateless-function": Array [
      "error",
      Object {
        "ignorePureComponents": true,
      },
    ],
    "react/prop-types": Array [
      "off",
      Object {
        "customValidators": Array [],
        "ignore": Array [],
        "skipUndeclared": false,
      },
    ],
    "react/react-in-jsx-scope": Array [
      "error",
    ],
    "react/require-default-props": Array [
      "error",
      Object {
        "forbidDefaultForRequired": true,
      },
    ],
    "react/require-optimization": Array [
      "off",
      Object {
        "allowDecorators": Array [],
      },
    ],
    "react/require-render-return": Array [
      "error",
    ],
    "react/self-closing-comp": Array [
      "error",
    ],
    "react/sort-comp": Array [
      "error",
      Object {
        "groups": Object {
          "lifecycle": Array [
            "displayName",
            "propTypes",
            "contextTypes",
            "childContextTypes",
            "mixins",
            "statics",
            "defaultProps",
            "constructor",
            "getDefaultProps",
            "getInitialState",
            "state",
            "getChildContext",
            "getDerivedStateFromProps",
            "componentWillMount",
            "UNSAFE_componentWillMount",
            "componentDidMount",
            "componentWillReceiveProps",
            "UNSAFE_componentWillReceiveProps",
            "shouldComponentUpdate",
            "componentWillUpdate",
            "UNSAFE_componentWillUpdate",
            "getSnapshotBeforeUpdate",
            "componentDidUpdate",
            "componentDidCatch",
            "componentWillUnmount",
          ],
          "rendering": Array [
            "/^render.+$/",
            "render",
          ],
        },
        "order": Array [
          "static-variables",
          "static-methods",
          "instance-variables",
          "lifecycle",
          "/^on.+$/",
          "getters",
          "setters",
          "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
          "instance-methods",
          "everything-else",
          "rendering",
        ],
      },
    ],
    "react/sort-prop-types": Array [
      "off",
      Object {
        "callbacksLast": false,
        "ignoreCase": true,
        "requiredFirst": false,
        "sortShapeProp": true,
      },
    ],
    "react/state-in-constructor": Array [
      "error",
      "always",
    ],
    "react/static-property-placement": Array [
      "error",
      "property assignment",
    ],
    "react/style-prop-object": Array [
      "error",
    ],
    "react/void-dom-elements-no-children": Array [
      "error",
    ],
    "regexp/confusing-quantifier": Array [
      "error",
    ],
    "regexp/control-character-escape": Array [
      "error",
    ],
    "regexp/hexadecimal-escape": Array [
      "error",
      "never",
    ],
    "regexp/letter-case": Array [
      "error",
      Object {
        "caseInsensitive": "lowercase",
        "controlEscape": "uppercase",
        "hexadecimalEscape": "uppercase",
        "unicodeEscape": "uppercase",
      },
    ],
    "regexp/match-any": Array [
      "error",
    ],
    "regexp/negation": Array [
      "error",
    ],
    "regexp/no-assertion-capturing-group": Array [
      "off",
    ],
    "regexp/no-contradiction-with-assertion": Array [
      "error",
    ],
    "regexp/no-control-character": Array [
      "error",
    ],
    "regexp/no-dupe-characters-character-class": Array [
      "error",
    ],
    "regexp/no-dupe-disjunctions": Array [
      "error",
    ],
    "regexp/no-empty-alternative": Array [
      "error",
    ],
    "regexp/no-empty-capturing-group": Array [
      "error",
    ],
    "regexp/no-empty-character-class": Array [
      "error",
    ],
    "regexp/no-empty-group": Array [
      "error",
    ],
    "regexp/no-empty-lookarounds-assertion": Array [
      "error",
    ],
    "regexp/no-escape-backspace": Array [
      "error",
    ],
    "regexp/no-invalid-regexp": Array [
      "error",
    ],
    "regexp/no-invisible-character": Array [
      "error",
    ],
    "regexp/no-lazy-ends": Array [
      "error",
    ],
    "regexp/no-legacy-features": Array [
      "error",
    ],
    "regexp/no-misleading-unicode-character": Array [
      "error",
    ],
    "regexp/no-non-standard-flag": Array [
      "error",
    ],
    "regexp/no-obscure-range": Array [
      "error",
    ],
    "regexp/no-octal": Array [
      "error",
    ],
    "regexp/no-optional-assertion": Array [
      "error",
    ],
    "regexp/no-potentially-useless-backreference": Array [
      "error",
    ],
    "regexp/no-standalone-backslash": Array [
      "off",
    ],
    "regexp/no-super-linear-backtracking": Array [
      "error",
    ],
    "regexp/no-super-linear-move": Array [
      "off",
    ],
    "regexp/no-trivially-nested-assertion": Array [
      "error",
    ],
    "regexp/no-trivially-nested-quantifier": Array [
      "error",
    ],
    "regexp/no-unused-capturing-group": Array [
      "error",
    ],
    "regexp/no-useless-assertions": Array [
      "error",
    ],
    "regexp/no-useless-backreference": Array [
      "error",
    ],
    "regexp/no-useless-character-class": Array [
      "error",
    ],
    "regexp/no-useless-dollar-replacements": Array [
      "error",
    ],
    "regexp/no-useless-escape": Array [
      "error",
    ],
    "regexp/no-useless-exactly-quantifier": Array [
      "off",
    ],
    "regexp/no-useless-flag": Array [
      "error",
    ],
    "regexp/no-useless-lazy": Array [
      "error",
    ],
    "regexp/no-useless-non-capturing-group": Array [
      "error",
    ],
    "regexp/no-useless-non-greedy": Array [
      "off",
    ],
    "regexp/no-useless-quantifier": Array [
      "error",
    ],
    "regexp/no-useless-range": Array [
      "error",
    ],
    "regexp/no-useless-two-nums-quantifier": Array [
      "error",
    ],
    "regexp/no-zero-quantifier": Array [
      "error",
    ],
    "regexp/optimal-lookaround-quantifier": Array [
      "error",
    ],
    "regexp/optimal-quantifier-concatenation": Array [
      "error",
    ],
    "regexp/order-in-character-class": Array [
      "off",
    ],
    "regexp/prefer-character-class": Array [
      "error",
    ],
    "regexp/prefer-d": Array [
      "error",
    ],
    "regexp/prefer-escape-replacement-dollar-char": Array [
      "error",
    ],
    "regexp/prefer-lookaround": Array [
      "error",
    ],
    "regexp/prefer-named-backreference": Array [
      "off",
    ],
    "regexp/prefer-named-capture-group": Array [
      "off",
    ],
    "regexp/prefer-named-replacement": Array [
      "off",
    ],
    "regexp/prefer-plus-quantifier": Array [
      "error",
    ],
    "regexp/prefer-predefined-assertion": Array [
      "error",
    ],
    "regexp/prefer-quantifier": Array [
      "error",
    ],
    "regexp/prefer-question-quantifier": Array [
      "error",
    ],
    "regexp/prefer-range": Array [
      "error",
    ],
    "regexp/prefer-regexp-exec": Array [
      "off",
    ],
    "regexp/prefer-regexp-test": Array [
      "error",
    ],
    "regexp/prefer-result-array-groups": Array [
      "error",
    ],
    "regexp/prefer-star-quantifier": Array [
      "error",
    ],
    "regexp/prefer-t": Array [
      "off",
    ],
    "regexp/prefer-unicode-codepoint-escapes": Array [
      "error",
    ],
    "regexp/prefer-w": Array [
      "error",
    ],
    "regexp/require-unicode-regexp": Array [
      "error",
    ],
    "regexp/sort-alternatives": Array [
      "error",
    ],
    "regexp/sort-character-class-elements": Array [
      "error",
    ],
    "regexp/sort-flags": Array [
      "error",
    ],
    "regexp/strict": Array [
      "error",
    ],
    "regexp/unicode-escape": Array [
      "error",
    ],
    "regexp/use-ignore-case": Array [
      "error",
    ],
    "require-atomic-updates": Array [
      "off",
    ],
    "require-await": Array [
      "error",
    ],
    "require-jsdoc": Array [
      "off",
    ],
    "require-unicode-regexp": Array [
      "error",
    ],
    "require-yield": Array [
      "error",
    ],
    "rest-spread-spacing": Array [
      "error",
      "never",
    ],
    "semi": Array [
      "error",
      "always",
    ],
    "semi-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "semi-style": Array [
      "error",
      "last",
    ],
    "sonarjs/cognitive-complexity": Array [
      "error",
      15,
    ],
    "sonarjs/elseif-without-else": Array [
      "off",
    ],
    "sonarjs/max-switch-cases": Array [
      "error",
    ],
    "sonarjs/no-all-duplicated-branches": Array [
      "error",
    ],
    "sonarjs/no-collapsible-if": Array [
      "error",
    ],
    "sonarjs/no-collection-size-mischeck": Array [
      "error",
    ],
    "sonarjs/no-duplicate-string": Array [
      "error",
      10,
    ],
    "sonarjs/no-duplicated-branches": Array [
      "error",
    ],
    "sonarjs/no-element-overwrite": Array [
      "error",
    ],
    "sonarjs/no-empty-collection": Array [
      "off",
    ],
    "sonarjs/no-extra-arguments": Array [
      "error",
    ],
    "sonarjs/no-gratuitous-expressions": Array [
      "error",
    ],
    "sonarjs/no-identical-conditions": Array [
      "error",
    ],
    "sonarjs/no-identical-expressions": Array [
      "error",
    ],
    "sonarjs/no-identical-functions": Array [
      "error",
    ],
    "sonarjs/no-ignored-return": Array [
      "error",
    ],
    "sonarjs/no-inverted-boolean-check": Array [
      "error",
    ],
    "sonarjs/no-nested-switch": Array [
      "error",
    ],
    "sonarjs/no-nested-template-literals": Array [
      "error",
    ],
    "sonarjs/no-one-iteration-loop": Array [
      "error",
    ],
    "sonarjs/no-redundant-boolean": Array [
      "error",
    ],
    "sonarjs/no-redundant-jump": Array [
      "error",
    ],
    "sonarjs/no-same-line-conditional": Array [
      "error",
    ],
    "sonarjs/no-small-switch": Array [
      "error",
    ],
    "sonarjs/no-unused-collection": Array [
      "error",
    ],
    "sonarjs/no-use-of-empty-return-value": Array [
      "error",
    ],
    "sonarjs/no-useless-catch": Array [
      "error",
    ],
    "sonarjs/non-existent-operator": Array [
      "error",
    ],
    "sonarjs/prefer-immediate-return": Array [
      "error",
    ],
    "sonarjs/prefer-object-literal": Array [
      "error",
    ],
    "sonarjs/prefer-single-boolean-return": Array [
      "error",
    ],
    "sonarjs/prefer-while": Array [
      "error",
    ],
    "sort-imports": Array [
      "off",
      Object {
        "ignoreCase": false,
        "ignoreDeclarationSort": false,
        "ignoreMemberSort": false,
        "memberSyntaxSortOrder": Array [
          "none",
          "all",
          "multiple",
          "single",
        ],
      },
    ],
    "sort-keys": Array [
      "off",
      "asc",
      Object {
        "caseSensitive": false,
        "natural": true,
      },
    ],
    "sort-vars": Array [
      "off",
    ],
    "space-before-blocks": Array [
      "error",
    ],
    "space-before-function-paren": Array [
      "error",
      Object {
        "anonymous": "always",
        "asyncArrow": "always",
        "named": "never",
      },
    ],
    "space-in-parens": Array [
      "error",
      "never",
    ],
    "space-infix-ops": Array [
      "error",
    ],
    "space-unary-ops": Array [
      "error",
      Object {
        "nonwords": false,
        "overrides": Object {},
        "words": true,
      },
    ],
    "spaced-comment": Array [
      "error",
      "always",
      Object {
        "block": Object {
          "balanced": true,
          "exceptions": Array [
            "-",
            "+",
          ],
          "markers": Array [
            "=",
            "!",
            ":",
            "::",
          ],
        },
        "line": Object {
          "exceptions": Array [
            "-",
            "+",
          ],
          "markers": Array [
            "=",
            "!",
          ],
        },
      },
    ],
    "strict": Array [
      "error",
      "never",
    ],
    "switch-colon-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "symbol-description": Array [
      "error",
    ],
    "template-curly-spacing": Array [
      "error",
    ],
    "template-tag-spacing": Array [
      "error",
      "never",
    ],
    "testing-library/await-async-query": Array [
      "error",
    ],
    "testing-library/await-async-utils": Array [
      "error",
    ],
    "testing-library/await-fire-event": Array [
      "off",
    ],
    "testing-library/consistent-data-testid": Array [
      "error",
    ],
    "testing-library/no-await-sync-events": Array [
      "off",
    ],
    "testing-library/no-await-sync-query": Array [
      "error",
    ],
    "testing-library/no-container": Array [
      "error",
    ],
    "testing-library/no-debugging-utils": Array [
      "error",
    ],
    "testing-library/no-dom-import": Array [
      "error",
      "react",
    ],
    "testing-library/no-global-regexp-flag-in-query": Array [
      "off",
    ],
    "testing-library/no-manual-cleanup": Array [
      "error",
    ],
    "testing-library/no-node-access": Array [
      "error",
    ],
    "testing-library/no-promise-in-fire-event": Array [
      "off",
    ],
    "testing-library/no-render-in-setup": Array [
      "error",
    ],
    "testing-library/no-unnecessary-act": Array [
      "off",
    ],
    "testing-library/no-wait-for-empty-callback": Array [
      "error",
    ],
    "testing-library/no-wait-for-multiple-assertions": Array [
      "error",
    ],
    "testing-library/no-wait-for-side-effects": Array [
      "error",
    ],
    "testing-library/no-wait-for-snapshot": Array [
      "error",
    ],
    "testing-library/prefer-explicit-assert": Array [
      "off",
    ],
    "testing-library/prefer-find-by": Array [
      "off",
    ],
    "testing-library/prefer-presence-queries": Array [
      "off",
    ],
    "testing-library/prefer-query-by-disappearance": Array [
      "off",
    ],
    "testing-library/prefer-screen-queries": Array [
      "error",
    ],
    "testing-library/prefer-user-event": Array [
      "off",
    ],
    "testing-library/prefer-wait-for": Array [
      "error",
    ],
    "testing-library/render-result-naming-convention": Array [
      "error",
    ],
    "unicode-bom": Array [
      "error",
      "never",
    ],
    "unicorn/better-regex": Array [
      "off",
    ],
    "unicorn/catch-error-name": Array [
      "error",
    ],
    "unicorn/consistent-destructuring": Array [
      "error",
    ],
    "unicorn/consistent-function-scoping": Array [
      "error",
    ],
    "unicorn/custom-error-definition": Array [
      "off",
    ],
    "unicorn/empty-brace-spaces": Array [
      "error",
    ],
    "unicorn/error-message": Array [
      "error",
    ],
    "unicorn/escape-case": Array [
      "error",
    ],
    "unicorn/expiring-todo-comments": Array [
      "error",
    ],
    "unicorn/explicit-length-check": Array [
      "error",
    ],
    "unicorn/filename-case": Array [
      "error",
      Object {
        "case": "camelCase",
      },
    ],
    "unicorn/import-index": Array [
      "error",
    ],
    "unicorn/import-style": Array [
      "error",
      Object {
        "styles": Object {
          "chalk": false,
          "path": Object {
            "named": true,
          },
        },
      },
    ],
    "unicorn/new-for-builtins": Array [
      "error",
    ],
    "unicorn/no-abusive-eslint-disable": Array [
      "error",
    ],
    "unicorn/no-array-callback-reference": Array [
      "error",
    ],
    "unicorn/no-array-for-each": Array [
      "off",
    ],
    "unicorn/no-array-method-this-argument": Array [
      "error",
    ],
    "unicorn/no-array-push-push": Array [
      "error",
    ],
    "unicorn/no-array-reduce": Array [
      "off",
    ],
    "unicorn/no-await-expression-member": Array [
      "error",
    ],
    "unicorn/no-console-spaces": Array [
      "error",
    ],
    "unicorn/no-document-cookie": Array [
      "error",
    ],
    "unicorn/no-empty-file": Array [
      "error",
    ],
    "unicorn/no-for-loop": Array [
      "error",
    ],
    "unicorn/no-hex-escape": Array [
      "error",
    ],
    "unicorn/no-instanceof-array": Array [
      "error",
    ],
    "unicorn/no-invalid-remove-event-listener": Array [
      "error",
    ],
    "unicorn/no-keyword-prefix": Array [
      "off",
    ],
    "unicorn/no-lonely-if": Array [
      "error",
    ],
    "unicorn/no-nested-ternary": Array [
      "error",
    ],
    "unicorn/no-new-array": Array [
      "error",
    ],
    "unicorn/no-new-buffer": Array [
      "error",
    ],
    "unicorn/no-null": Array [
      "error",
    ],
    "unicorn/no-object-as-default-parameter": Array [
      "off",
    ],
    "unicorn/no-process-exit": Array [
      "error",
    ],
    "unicorn/no-static-only-class": Array [
      "error",
    ],
    "unicorn/no-thenable": Array [
      "error",
    ],
    "unicorn/no-this-assignment": Array [
      "error",
    ],
    "unicorn/no-unreadable-array-destructuring": Array [
      "error",
    ],
    "unicorn/no-unreadable-iife": Array [
      "error",
    ],
    "unicorn/no-unsafe-regex": Array [
      "off",
    ],
    "unicorn/no-unused-properties": Array [
      "off",
    ],
    "unicorn/no-useless-fallback-in-spread": Array [
      "error",
    ],
    "unicorn/no-useless-length-check": Array [
      "error",
    ],
    "unicorn/no-useless-promise-resolve-reject": Array [
      "error",
    ],
    "unicorn/no-useless-spread": Array [
      "error",
    ],
    "unicorn/no-useless-switch-case": Array [
      "error",
    ],
    "unicorn/no-useless-undefined": Array [
      "error",
    ],
    "unicorn/no-zero-fractions": Array [
      "error",
    ],
    "unicorn/number-literal-case": Array [
      "error",
    ],
    "unicorn/numeric-separators-style": Array [
      "error",
      Object {
        "binary": Object {
          "groupLength": 4,
          "minimumDigits": 0,
        },
        "hexadecimal": Object {
          "groupLength": 2,
          "minimumDigits": 0,
        },
        "number": Object {
          "groupLength": 3,
          "minimumDigits": 5,
        },
        "octal": Object {
          "groupLength": 4,
          "minimumDigits": 0,
        },
        "onlyIfContainsSeparator": false,
      },
    ],
    "unicorn/prefer-add-event-listener": Array [
      "error",
    ],
    "unicorn/prefer-array-find": Array [
      "error",
    ],
    "unicorn/prefer-array-flat": Array [
      "error",
    ],
    "unicorn/prefer-array-flat-map": Array [
      "error",
    ],
    "unicorn/prefer-array-index-of": Array [
      "error",
    ],
    "unicorn/prefer-array-some": Array [
      "error",
    ],
    "unicorn/prefer-at": Array [
      "error",
      Object {
        "checkAllIndexAccess": true,
      },
    ],
    "unicorn/prefer-code-point": Array [
      "error",
    ],
    "unicorn/prefer-date-now": Array [
      "error",
    ],
    "unicorn/prefer-default-parameters": Array [
      "error",
    ],
    "unicorn/prefer-dom-node-append": Array [
      "error",
    ],
    "unicorn/prefer-dom-node-dataset": Array [
      "error",
    ],
    "unicorn/prefer-dom-node-remove": Array [
      "error",
    ],
    "unicorn/prefer-dom-node-text-content": Array [
      "error",
    ],
    "unicorn/prefer-export-from": Array [
      "error",
      Object {
        "ignoreUsedVariables": true,
      },
    ],
    "unicorn/prefer-includes": Array [
      "error",
    ],
    "unicorn/prefer-json-parse-buffer": Array [
      "error",
    ],
    "unicorn/prefer-keyboard-event-key": Array [
      "error",
    ],
    "unicorn/prefer-math-trunc": Array [
      "error",
    ],
    "unicorn/prefer-modern-dom-apis": Array [
      "error",
    ],
    "unicorn/prefer-modern-math-apis": Array [
      "error",
    ],
    "unicorn/prefer-module": Array [
      "off",
    ],
    "unicorn/prefer-native-coercion-functions": Array [
      "error",
    ],
    "unicorn/prefer-negative-index": Array [
      "error",
    ],
    "unicorn/prefer-node-protocol": Array [
      "off",
    ],
    "unicorn/prefer-number-properties": Array [
      "error",
    ],
    "unicorn/prefer-object-from-entries": Array [
      "error",
    ],
    "unicorn/prefer-optional-catch-binding": Array [
      "error",
    ],
    "unicorn/prefer-prototype-methods": Array [
      "error",
    ],
    "unicorn/prefer-query-selector": Array [
      "error",
    ],
    "unicorn/prefer-reflect-apply": Array [
      "error",
    ],
    "unicorn/prefer-regexp-test": Array [
      "error",
    ],
    "unicorn/prefer-set-has": Array [
      "error",
    ],
    "unicorn/prefer-spread": Array [
      "error",
    ],
    "unicorn/prefer-string-replace-all": Array [
      "error",
    ],
    "unicorn/prefer-string-slice": Array [
      "error",
    ],
    "unicorn/prefer-string-starts-ends-with": Array [
      "error",
    ],
    "unicorn/prefer-string-trim-start-end": Array [
      "error",
    ],
    "unicorn/prefer-switch": Array [
      "error",
    ],
    "unicorn/prefer-ternary": Array [
      "error",
      "only-single-line",
    ],
    "unicorn/prefer-top-level-await": Array [
      "off",
    ],
    "unicorn/prefer-type-error": Array [
      "error",
    ],
    "unicorn/prevent-abbreviations": Array [
      "error",
      Object {
        "allowList": Object {
          "Params": true,
          "Props": true,
          "Ref": true,
          "args": true,
          "cmd": true,
          "env": true,
          "i": true,
          "msg": true,
          "n": true,
          "params": true,
          "props": true,
          "ref": true,
        },
      },
    ],
    "unicorn/relative-url-style": Array [
      "error",
    ],
    "unicorn/require-array-join-separator": Array [
      "error",
    ],
    "unicorn/require-number-to-fixed-digits-argument": Array [
      "error",
    ],
    "unicorn/require-post-message-target-origin": Array [
      "off",
    ],
    "unicorn/string-content": Array [
      "off",
    ],
    "unicorn/template-indent": Array [
      "off",
    ],
    "unicorn/text-encoding-identifier-case": Array [
      "error",
    ],
    "unicorn/throw-new-error": Array [
      "error",
    ],
    "use-isnan": Array [
      "error",
    ],
    "valid-jsdoc": Array [
      "off",
    ],
    "valid-typeof": Array [
      "error",
      Object {
        "requireStringLiterals": true,
      },
    ],
    "vars-on-top": Array [
      "error",
    ],
    "wrap-iife": Array [
      "error",
      "outside",
      Object {
        "functionPrototypeMethods": false,
      },
    ],
    "wrap-regex": Array [
      "off",
    ],
    "yield-star-spacing": Array [
      "error",
      "after",
    ],
    "yoda": Array [
      "error",
      "never",
      Object {
        "exceptRange": true,
        "onlyEquality": true,
      },
    ],
  },
  "settings": Object {
    "import/extensions": Array [
      ".js",
      ".ts",
      ".tsx",
      ".d.ts",
      ".jsx",
    ],
    "import/external-module-folders": Array [
      "node_modules",
      "node_modules/@types",
    ],
    "import/parsers": Object {
      "@typescript-eslint/parser": Array [
        ".ts",
        ".tsx",
        ".d.ts",
      ],
    },
    "import/resolver": Object {
      "node": Object {
        "extensions": Array [
          ".js",
          ".ts",
          ".tsx",
          ".d.ts",
          ".jsx",
        ],
      },
    },
    "react": Object {
      "version": "detect",
    },
  },
}
`;
